<?xml version='1.0' encoding="ISO-8859-1"?>
<chapter id="ydtemplate">

    <title>Using templates</title>

    <para>In this chapter, we will have a closer look at how the template engine in the Yellow Duck Framework is working and how it's implemented. The template engine in the framework is based on <ulink url="http://smarty.php.net/">Smarty</ulink> and follows the same syntax as any normal Smarty template file.</para>

    <para>The documentation for the Smarty template engine can be found <ulink url="http://smarty.php.net/manual/en/">here</ulink>.</para>

    <para>The API of the <literal>YDTemplate</literal> class is exactly the same as the standard <literal>Smarty</literal> class. You can think of the <literal>YDTemplate</literal> class as a preconfigured <literal>Smarty</literal> template class.</para>

    <note>If you don't want to use the Smarty template engine, you can easily use any other template engine you want. You are not limited to using just the Smarty template engine. If you want to use a different template engine, you can create your own version of the <literal>YDTemplate</literal> class by extending the existing one or reimplementing it from scratch.</note>

    <sect1 id="ydtemplate_ydtemplate_class">

        <title>The <literal>YDTemplate</literal> class</title>

        <para>For managing templates, there is a specific class class <literal>YDTemplate</literal>. If you instantiate this class, you can assign variables to it, and then, using these variables, you can output a named template.</para>

        <para>The following code sample gives you a small example on how this works:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ydtemplate_001.xml" />

        <para>The template for this code could look as follows:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ydtemplate_002.xml" />

        <para>If you run this example, the following screen will be showed in your webbrowser:</para>

        <para><mediaobject>
            <imageobject role="html">
                <imagedata fileref="ydtemplate_output.gif" />
            </imageobject>
            <imageobject role="fo">
                <imagedata fileref="ydtemplate_output.gif" width="95.3mm" height="59.6mm" scalefit="0" />
            </imageobject>
        </mediaobject></para>

        <para>As you can see, we assigned two variables to our template instance. Each variable you want to use in the template engine needs to be assigned to the template instance before you can use it. Assigning a variable to a template implies that we link a template variable name to a PHP object. These objects can be anything from an array to a simple string. Assigning objects to a template is not supported.</para>

        <para>Once we assigned all the variables, we can issue the <literal>fetch</literal> function of the template class to get the result of the parsed template. This function takes one argument, which is the name of the template. If you want to immediately show the template result, you can use the <literal>display</literal> function instead.</para>

        <para>The name of the template you need to specify for the <literal>fetch</literal> and <literal>display</literal> functions is the basename of the template without the <literal>tpl</literal> extension.</para>

        <para>For both functions, the name of the template is optional. If the template name is not specified, it will use the name of the class as the basename for the template, adding <literal>tpl</literal> as the file extension.</para>

        <para>In our example, you would need the following files to make the example work:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold"><literal>template.php</literal>:</emphasis> the actual PHP script</listitem>
            <listitem><emphasis role="bold"><literal>template.tpl</literal>:</emphasis> the template attached to the PHP script</listitem>
        </itemizedlist>

        <para>By convention, all templates have the extension <literal>tpl</literal>. This is also hardcoded in the framework itself. Please, stick to this standard.</para>

    </sect1>

    <sect1 id="ydtemplate_search_paths">

        <title>The <literal>YDTemplate</literal> class</title>

        <para>To find templates, the Yellow Duck Framework takes a look at the <literal>template_dir</literal> class variable. By default, this is set to the same directory of the current PHP script. You can easily change by assigning a new value to the <literal>template_dir</literal> class variable.</para>

        <warning>Do not change the value of the <literal>template_dir</literal> class during in the middle of the script, or you might not get the result you expected. Make it a habit of setting up this value when you instantiate the <literal>YDTemplate</literal> class.</warning>

    </sect1>

    <sect1 id="ydtemplate_standard_vars">

        <title>Standard template variables</title>

        <para>For each template, there are a number of standard variables available which you can always reference. These variables all start with <literal>YD_</literal> and are all uppercase. Here's the list of the standard variables:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold"><literal>YD_FW_NAME</literal>:</emphasis> name of the framework</listitem>
            <listitem><emphasis role="bold"><literal>YD_FW_VERSION</literal>:</emphasis> version of the framework</listitem>
            <listitem><emphasis role="bold"><literal>YD_FW_NAMEVERS</literal>:</emphasis> the combination of the two items above</listitem>
            <listitem><emphasis role="bold"><literal>YD_FW_HOMEPAGE</literal>:</emphasis> the homepage of the Yellow Duck Framework</listitem>
            <listitem><emphasis role="bold"><literal>YD_SELF_SCRIPT</literal>:</emphasis> the current script's path, e.g. <literal>/myapp/index.php</literal></listitem>
            <listitem><emphasis role="bold"><literal>YD_SELF_URI</literal>:</emphasis> the URI which was given in order to access this page, e.g. <literal>/myapp/index.php?do=edit</literal></listitem>
            <listitem><emphasis role="bold"><literal>YD_ACTION_PARAM</literal>:</emphasis> the name of the <literal>$_GET</literal> parameter that specifies which action needs to be executed. This is <literal>do</literal> by convention.</listitem>
        </itemizedlist>

        <warning>Please do not use the <literal>YD_</literal> prefix for your own variables. This prefix is uniquely reserverd for the variables automatically assigned by the Yellow Duck Framework.</warning>

    </sect1>

    <sect1 id="ydtemplate_syntax">

        <title>Template syntax</title>

        <para>Since the <literal>YDTemplate</literal> class is based on the Smarty template engine, the same functionality and options are provided. This means that all the options such as the standard modifiers, caching options etc. are available in the YDTemplate class. From a syntax point of view, the <literal>YDTemplate</literal> and the <literal>Smarty</literal> implement the exact same API.</para>

        <para>To find more information about the Smarty syntax, please take a look at the <ulink url="http://smarty.php.net/manual/en/">Smarty documentation</ulink>.</para>

    </sect1>

    <sect1 id="ydtemplate_escaping_js_and_css">

        <title>Escaping JavaScript and CSS items in your template</title>

        <para>As JavaScript and CSS use the same delimiters as the template engine, you need to add some special stuff to the template so that the parser doesn't get confused.</para>

        <para>The easiest is to surround the CSS and the JavaScript code with the <literal>{literal}</literal> tag. This will make the template parser ignore the text in between the tags and will avoid that the parser get's confused.</para>

        <para>Here's an example:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ydtemplate_003.xml" />

        <para>This will output the following:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ydtemplate_004.xml" />

    </sect1>

</chapter>
