<?xml version='1.0' encoding="ISO-8859-1"?>
<chapter id="yddatabase">

    <title>Connecting to and using databases</title>

    <para>The Yellow Duck Framework has a relatively simple but very effective and easy to use database connection layer. Even though there are already a lot of database connection layers available on the market, we found that there would be place for something more simple. The difference is that the library included in the Yellow Duck Framework doesn't try to support every feature available in every database, but tries to concentrate on a common set of functions that work across all major database engines.</para>

    <para>Currently, the following database engines are supported:</para>

    <itemizedlist spacing="compact">
        <listitem><emphasis role="bold">MySQL:</emphasis> <ulink url="http://www.mysql.com/" /></listitem>
        <listitem><emphasis role="bold">Oracle:</emphasis> <ulink url="http://www.oracle.com/" /></listitem>
        <listitem><emphasis role="bold">SQLite:</emphasis> <ulink url="http://www.sqlite.org/" /></listitem>
        <listitem><emphasis role="bold">PostgreSQL:</emphasis> <ulink url="http://www.postgresql.org/" /></listitem>
    </itemizedlist>

    <para>More database engines will be added in the future depending on the requests from the users.</para>

    <sect1 id="yddatabase_connecting">

        <title>Connecting to a database</title>

        <para>For establishing a database connection, you will use the YDDatabase class. Using the static method getInstance of the YDDatabase class, you can get an instance of a YDDatabaseDriver class which is used to interact with the database. The following code sample illustrates this:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_001.xml" />

        <para>The following options can be specified:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold">$driver:</emphasis> Name of the database driver.</listitem>
            <listitem><emphasis role="bold">$db:</emphasis> Database name to use for the connection.</listitem>
            <listitem><emphasis role="bold">$user (optional):</emphasis> User name to use for the connection.</listitem>
            <listitem><emphasis role="bold">$pass (optional):</emphasis> Password to use for the connection.</listitem>
            <listitem><emphasis role="bold">$host (optional):</emphasis> Host name to use for the connection.</listitem>
            <listitem><emphasis role="bold">$options (optional):</emphasis> Options to pass to the driver.</listitem>
        </itemizedlist>

        <para>The following database drivers can be specified:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold">mysql:</emphasis> MySQL (requires the mysql PHP extension)</listitem>
            <listitem><emphasis role="bold">oracle:</emphasis> Oracle (requires the oci8 PHP extension)</listitem>
            <listitem><emphasis role="bold">sqlite:</emphasis> SQLite (requires the sqlite PHP extension)</listitem>
            <listitem><emphasis role="bold">posgresql:</emphasis> PostgreSQL (requires the pgsql PHP extension)</listitem>
        </itemizedlist>

        <para>Only the driver and database name are required, but depending on the chosen database driver, you will need to add more parameters. Please refer to the documentation of the database driver or your database software for more details.</para>

        <para>The connection is not automatically opened when you instantiate the YDDatabaseDriver class, but is only opened when needed. There is however a way to force that a database connection will be made. This can be done by invoking the connect function on the YDDatabaseDriver class. If you execute the connect function twice on the same instance, the first connection will be reused. To close the connection and disconnect from the database, the close function of the YDDatabaseDriver class can be used.</para>

    </sect1>

    <sect1 id="yddatabase_config">

        <title>Configuring the YDDatabase class</title>

        <para>There are two things you can configure in the YDDatabase class:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold">YD_DB_DEFAULTPAGESIZE:</emphasis> The default pagesize for the YDRecordSet class</listitem>
            <listitem><emphasis role="bold">YD_DB_FETCHTYPE:</emphasis> The result type you want to get from the getRecord and getRecords functions. This can either be YD_DB_FETCH_ASSOC to get them as an associative array or YD_DB_FETCH_NUM to get the records as a numeric array.</listitem>
        </itemizedlist>

        <para>Both options can be set using the YDConfig object, as demonstrated with the following code sample:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_002.xml" />

    </sect1>

    <sect1 id="yddatabase_getting_db_info">

        <title>Getting information about the database software</title>

        <para>Each database driver instance has a number of features to return information about the actual database backend. The getServerVersion function returns the name and version of the database engine it is connected to. This information is returned as a string. The getSqlCount function will return the number of queries this database instance has executed already.</para>

    </sect1>

    <sect1 id="yddatabase_escaping_vars">

        <title>Escaping variables in SQL statements</title>

        <para>Since the YDDatabase libraries use native SQL statements in a lot of the function calls, there is a need to uniformly escape strings so that it's safe to include them in an SQL statement. For this purpose, the YDDatabase library has two functions, called escape and escapeSql. Both functions do the same, but the escape function doesn't put single quotes around the string, while the escapeSql function does.</para>

    </sect1>

    <sect1 id="yddatabase_executing_sql">

        <title>Executing queries</title>

        <para>To execute a query on the database, you can use the executeSql function from the YDDatabaseDriver class. This function will execute the specified SQL statement and will return the number of rows that were affected by this query.</para>

    </sect1>

    <sect1 id="yddatabase_getting_data">

        <title>Getting data from the database</title>

        <para>To get information out of the database, there are a number of different get functions that each have their own way getting data from the database. Currently, the following get functions are available:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold">getRecord:</emphasis> gets a single record from the database</listitem>
            <listitem><emphasis role="bold">getRecords:</emphasis> gets a list of records from the database</listitem>
            <listitem><emphasis role="bold">getValue:</emphasis> gets a value from a field from a specific record from the database</listitem>
            <listitem><emphasis role="bold">getValueByName:</emphasis> the same as the getValue function, but this one allows you to specify the column by it's name instead of by it's index.</listitem>
            <listitem><emphasis role="bold">getValuesByName:</emphasis> get's the list of values from the specified colum of the records.</listitem>
            <listitem><emphasis role="bold">getAsAssocArray:</emphasis> uses the given field values as key and value to construct an associative array.</listitem>
        </itemizedlist>

        <para>All these functions have a number of common characteristics:</para>

        <itemizedlist spacing="compact">
            <listitem>Each function requires you to specify a SQL statement to execute.</listitem>
            <listitem>Each function has 0 or more options you can specify.</listitem>
            <listitem>The get functions always return the records as associative arrays with lowercase key names.</listitem>
            <listitem>Column names are always case insensitive.</listitem>
        </itemizedlist>

        <para>Here are some samples that show you for what type of queries you can use each individual function:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_003.xml" />

        <para>The getRecords function gives you some options of limiting the data returned by this function. You can specify the maximum number of records that should be returned as well as the first record to start retrieving from. This functionality is natively supported for all database engines currently supported by the Yellow Duck Framework (MySQL, SQLite, PostgreSQL, Oracle). Here's a code example explaining how this works:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_004.xml" />

        <note>This function doesn't return any extra information about what is returned, and this should be calculated manually.</note>

    </sect1>

    <sect1 id="yddatabase_paged">

        <title>Using paged recordsets</title>

        <para>A lot of times, a table or query contains too many rows to be useful in a webpage. A common technique to get around this is to use "paged recordsets". These recordsets split up the result in pages and only show a part of the recordset with previous and next buttons. The following screenshot illustrates this technique:</para>

        <para><mediaobject>
            <imageobject>
                <imagedata fileref="paged_recordset.gif"/>
            </imageobject>
        </mediaobject></para>

        <para>In this screenshot, you can see that we only show part of the records and we also provide some navigational aids to make it easier to browse through the recordset.</para>

        <para>The basic idea is that we split up the recordset in a number of pages each containing a maximum number of results.</para>

        <para>To make this easier to use, you can use the function getRecordAsSet from the YDDatabaseDriver class. This function takes two (optional) arguments where you can specify the page and the page size:</para>

        <itemizedlist spacing="compact">
            <listitem>$sql: the SQL statement to execute</listitem>
            <listitem>$page: the page to retrieve from the recordset</listitem>
            <listitem>$pagesize: the maximum number of records allowed for each page</listitem>
        </itemizedlist>

        <para>This function returns a YDRecordSet object, which contains the records themselves, as well as a whole bunch of extra information about the recordset. Here's a lit of the extra items the YDRecordSet class contains</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold">page:</emphasis> current page number</listitem>
            <listitem><emphasis role="bold">pagesize:</emphasis> total size of each page</listitem>
            <listitem><emphasis role="bold">pagePrevious:</emphasis> the number of the previous page</listitem>
            <listitem><emphasis role="bold">pageNext:</emphasis> the number of the next page</listitem>
            <listitem><emphasis role="bold">offset:</emphasis> the first record we started reading from</listitem>
            <listitem><emphasis role="bold">totalPages:</emphasis> the total number of pages</listitem>
            <listitem><emphasis role="bold">totalRows:</emphasis> the total number of rows in the unpaged recordset</listitem>
            <listitem><emphasis role="bold">totalRowsOnPages:</emphasis> the total number of rows on the current page</listitem>
            <listitem><emphasis role="bold">isFirstPage:</emphasis> boolean indicating if we are on the first page or not</listitem>
            <listitem><emphasis role="bold">isLastPage:</emphasis> boolean indicating if we are on the last page or not</listitem>
            <listitem><emphasis role="bold">pages:</emphasis> all the page numbers as a single-dimension array</listitem>
        </itemizedlist>

        <para>All these items are available as class variables from the YDRecordSet class.</para>

        <para>The following example shows how this can be implemented in a real life example:</para>

        <para>This is the code for the request class:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_005.xml" />

        <para>The template that goes along with this request class looks as follows:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_006.xml" />

        <para>As you can see in the previous example, we use the different getter functions to get the URL to the current, next and previous pages. Sometimes, you want to add some extra information to the URL. You can do this by getting a reference to the YDUrl object associated with the YDRecordSet. You can then change the URL using the methods provided by the YDUrl object. These changes will be automatically reflected in the YDRecordSet object linked with it. This is demonstrated with the following code sample:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_007.xml" />

        <note>Be careful with using very large recordsets with this method. With recordsets containing millions of rows, this way of working can be quite slow.</note>

        <para>Since the YDRecordSet class is based on regular arrays, you can use it to page regular arrays as well. To page regular arrays, you need to instantiate the YDRecordSet class yourself, as illustrated by the following code sample:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_008.xml" />

        <para>The template that goes along with this code sample looks as follows:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_009.xml" />

    </sect1>

    <sect1 id="yddatabase_insert">

        <title>Inserting new information</title>

        <para>To insert information in the database, there are a number of ways you can use. One way of working is to construct an insert SQL query and execute it using the executeSql function. This however has some drawbacks in that sense that you need to escape all the string values manually. A much easier is to use the executeInsert function which does most of the difficult work in the background.</para>

        <para>This function takes two arguments, being the name of the table to insert the data into, and an associative array mapping the column names to their values. The following example demonstrates how this works:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_010.xml" />

        <para>If the database supports auto increment values for the primary key, this function will return the ID of the last insert. Please note that unfortunately, not all database engines support this. Currently, SQLite and MySQL? support this. Oracle and PostgreSQL? rely on sequences and triggers to do this automatically.</para>

    </sect1>

    <sect1 id="yddatabase_update">

        <title>Updating existing information</title>

        <para>Updating database information works in pretty much the same way as inserting data. Again, you can construct the query manually and use the executeSql function to get the data updated in the database. Much easier and much nicer is to use the executeUpdate function. This takes a table name, an associative array mapping the column names to the column values and optionally, you can specify a where clause to limit the number of updates.</para>

        <para>Here's an example:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_011.xml" />

        <para>This function will return the number of rows that was affected by this query.</para>

    </sect1>

    <sect1 id="yddatabase_delete">

        <title>Deleting information</title>

        <para>To delete information from the database, you can either manually issue an SQL statement which deletes the data, or you can use the executeDelete function from the YDDatabaseDriver class. </para>

        <para>This function takes two arguments, being the name of the table to delete the data from, and an optional where statement limiting the number of rows being deleted. The following example demonstrates how this works:</para>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/yddatabase_012.xml" />

    </sect1>

</chapter>
