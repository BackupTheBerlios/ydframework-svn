<?xml version='1.0' encoding="ISO-8859-1"?>
<chapter id="ydxmlrpc">

    <title>Using XML/RPC clients and servers</title>

    <sect1 id="ydxmlrpc_what_is_xmlrpc">

        <title>What is XML/RPC?</title>

        <para>XML/RPC is a spec and a set of implementations that allow software running on disparate operating systems, running in different environments to make procedure calls over the Internet.</para>

        <para>It's remote procedure calling using HTTP as the transport and XML as the encoding. XML-RPC is designed to be as simple as possible, while allowing complex data structures to be transmitted, processed and returned.</para>

        <para>To invoke an XML/RPC call, an XML/RPC client might send the following XML data to a server:</para>

        <programlisting><![CDATA[<?xml version="1.0"?>
<methodCall>
    <methodName>tide.getTideForDay</methodName>
    <params>
        <param>
            <value>
                <string>2004-05-11</string>
            </value>
        </param>
    </params>
</methodCall>]]></programlisting>

        <para>This server will then interpret the XML, execute the right function and send back the following XML data:</para>

        <programlisting><![CDATA[<?xml version="1.0"?>
<methodResponse>
    <params>
        <param>
            <value>
                <struct>
                    <member>
                        <name>tideDate</name>
                        <value><string>2004-05-11</string></value>
                    </member>
                    <member>
                        <name>tideDay</name>
                        <value><string>di</string></value>
                    </member>
                    <member>
                        <name>tideLow1</name>
                        <value><string>01:07:00</string></value>
                    </member>
                    <member>
                        <name>tideLow2</name>
                        <value><string>13:39:00</string></value>
                    </member>
                </struct>
            </value>
        </param>
    </params>
</methodResponse>]]></programlisting>

        <para>The XML/RPC client will interpret this XML response and will convert it back to objects and variables in the native programming language.</para>

        <para>The beauty of XML/RPC is that it's really easy to use and still high performant if implemented correctly. The client and the server can be speaking two totally different programming languages and still are able to exchange data between the two with preserving the native data types.</para>

        <para>The Yellow Duck Framework has classes for creating both XML/RPC clients and servers. Both use the very latest technology and are one of the few implementations that support GZip compression for the HTTP data streams, resulting in better performance.</para>

        <para>The YDXmlRpcClient class implements an XML/RPC client while the YDXmlRpcServer class implements a full XML/RPC server which supports introspection so that the client can easily determine what functions are supported by the server.</para>

        <para>Let's have a look at how these classes can be used to perform XML/RPC based communication.</para>

    </sect1>

    <sect1 id="ydxmlrpc_xmlrpc_client">

        <title>Using YDXmlRpcClient</title>

        <para>To create an XML/RPC client, we will use the YDXmlRpcClient class which does all the work for us. When you instantiate this class, you need to specify the URL of the XML/RPC server.</para>

        <para>Once you made an instance of the XML/RPC client, you can execute functions on that server by using it's execute function. This function takes two arguments which is the name of the XML/RPC method and an optional array with parameters.</para>

        <para>The request will then be executed and the result will be returned as real PHP values and objects.</para>

        <para>Let's have a look at the following code sample:</para>

        <programlisting><![CDATA[<?php

    YDInclude( 'YDXmlRpc.php' );
    $client = new YDXmlRpcClient(
        'http://www.grijzeblubber.be/bba/xmlrpc.php'
    ); 
    $result = $client->execute(
        'tide.getTideForDay', array( '2004-05-11' )
    );

?>]]></programlisting>

        <para>In this example, we first connect to the XML/RPC server using the specified URL. Then we execute the 'tide.getTideForDay' function on that server which returns an array.</para>

        <para>We had to specify a string with the date. After executing this, the variable $result will have the following contents:</para>

        <programlisting><![CDATA[array (
    'tideDate' => '2004-05-11',
    'tideDay' => 'di',
    'tideLow1' => '01:07:00',
    'tideLow2' => '13:39:00',
)]]></programlisting>

        <para>If something went wrong or the XML/RPC server returned an error, a fatal error will be raised with the right error message. The error message will be the same as the error message returned by the XML/RPC server.</para>

        <para>What you can not see in this example is that if the XML/RPC server supports GZip compression, this will be used to do the communication. This not only saves bandwidth but also improves the performance of the XML/RPC calls quite a lot. Since a new HTTP request has to be made for each XML/RPC call, reducing the total size of information send over the network can really improve the performance and scalability of your XML/RPC based services.</para>

    </sect1>

    <sect1 id="ydxmlrpc_xmlrpc_server">

        <title>Using YDXmlRpcServer</title>

        <para>It is also possible to write an XML/RPC server with the help of the Yellow Duck Framework. An XML/RPC server is actually a special kind of request class. The following code sample shows you how a very simple XML/RPC server can be written:</para>

        <programlisting><![CDATA[<?php

    // Standard include
    require_once( dirname( __FILE__ ) . '/YDFramework2/YDF2_init.php' );

    // Includes
    YDInclude( 'YDXmlRpc.php' );

    // Class definition
    class xmlrpcserver extends YDXmlRpcServer {

        // Class constructor
        function xmlrpcserver() {

            // Initialize the parent class
            $this->YDXmlRpcServer();
            
            // Register the methods
            $this->registerMethod(
                'echo', array( & $this, 'xmlrpcEcho' ), array( 'string', 'string' )
            );

        }

        // The method which just echoes a string
        function xmlrpcEcho( $var ) {
            return $var;
        }

    }

    // Process the request
    YDInclude( 'YDF2_process.php' );

?>]]></programlisting>

        <para>Every XML/RPC server you create should inherit from the YDXmlRpcServer class. This server will configure the XML/RPC server and show you an overview of the different methods understood by the server when an HTTP GET request is performed. The server that is created automatically has support for introspection.</para>

        <para>For publishing functions over XML/RPC, you first need to implement them as a normal function or class function. By convention, we create class functions and prepend the function names with xmlrpc to indicate that they are published over XML/RPC. Our example has one function declared, called xmlrpcEcho. This function will simply return the the value passed when calling this function.</para>

        <para>Now that we have the function, we need to declare it so that the XML/RPC server knows that this function should be published. This is done by using the registerMethod function of the YDXmlRpcServer class. The syntax for this function is as follows:</para>

        <programlisting><![CDATA[function registerMethod( $method, $function, $signature, $help="" ) {}]]></programlisting>

        <para>The following parameters can be specified:</para>

        <itemizedlist spacing="compact">
            <listitem><emphasis role="bold">$method:</emphasis> Name of the XML/RPC method.</listitem>
            <listitem><emphasis role="bold">$function:</emphasis> Function that needs to be executed for this XML/RPC request.</listitem>
            <listitem><emphasis role="bold">$signature:</emphasis> The signature for this function.</listitem>
            <listitem><emphasis role="bold">$help (optional):</emphasis> The help text describing this method.</listitem>
        </itemizedlist>

        <para>The $function variable can point to both a normal function or a class function. The following code sample shows how to refer to a class function (use the object name, then a colon and then the funtion name):</para>

        <programlisting><![CDATA[function registerMethod(
    'echo', 'this:xmlrpcEcho', array( 'string', 'string' )
);]]></programlisting>

        <para>The following code example shows you how to refer to a normal function:</para>

        <programlisting><![CDATA[function registerMethod(
    'echo', 'xmlrpcEcho', array( 'string', 'string' )
);]]></programlisting>

        <para>The method signature array describes both the type returned by the XML-RPC method and the types of the required arguments for that function. The first element in the array is the return type - it is compulsary. Any elements after that describe method paramaters. The IXR_IntrospectionServer will enforce these paramater types (unlike the basic IXR_Server which will pass any paramaters on to the methods without checking them) - if a method call is made to the server with an incorrect number of paramaters (or incorrect paramater types) the server will return an error message to the client.</para>

        <para>When specifying the method signature array, use an array containing strings from the following list: 'date', 'base64', 'string', 'int', 'float', 'boolean', 'array', 'struct'.</para>

        <para>The following screenshot shows you the default output of this demo script shown earlier. If the request is not a HTTP POST request, this is the screen the user will see:</para>

        <para><mediaobject>
            <imageobject>
                <imagedata fileref="xmlrpcserver.gif"/>
            </imageobject>
        </mediaobject></para>

        <para>You can change this by overriding the requestNotXmlRpc function in your XML/RPC server class. The following code sample illustrates this:</para>

        <programlisting><![CDATA[<?php

    // Standard include
    require_once( dirname( __FILE__ ) . '/YDFramework2/YDF2_init.php' );

    // Includes
    YDInclude( 'YDXmlRpc.php' );

    // Class definition
    class xmlrpcserver extends YDXmlRpcServer {

        // Class constructor
        function xmlrpcserver() {

            // Initialize the parent class
            $this->YDXmlRpcServer();
            
            // Register the methods
            $this->registerMethod(
                'echo', array( & $this, 'xmlrpcEcho' ), array( 'string', 'string' )
            );

        }

        // The method which just echoes a string
        function xmlrpcEcho( $var ) {
            return $var;
        }

        // Override the HTTP GET requests
        function requestNotXmlRpc() {
            echo( 'This is not a HTTP POST request.' );
        }

    }

    // Process the request
    YDInclude( 'YDF2_process.php' );

?>]]></programlisting>
    </sect1>

    <sect1 id="ydxmlrpc_more_info">

        <title>More information</title>

        <para>More information on XML/RPC can be found on the official XML/RPC website:</para>

        <para><ulink url="http://www.xmlrpc.com/" /></para>

    </sect1>

</chapter>
