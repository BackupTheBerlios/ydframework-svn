@Chapter
    @Title { Introduction }
    @Tag { introduction }
@Begin

@BeginSections

@Section
   @Title { Overview }
   @Tag { introduction_overview }
@Begin

@LP
The Yellow Duck Framework takes care of all the difficult work you normally have 
to perform manually when developing a web application. It is based on the idea 
of requests that can perform actions. By encapsulating all the programming in an
object-oriented environment, you get a framework that is easy to use and
understand, easy to extend and doesn't limit you in any way.

@LP
The Yellow Duck Framework supports the following items:

@BulletList
@ListItem { Clean separation of code and output }
@ListItem { Templates for outputting HTML easily }
@ListItem { Automatic action dispatching using URL parameters }
@ListItem { Object oriented form construction and validation }
@ListItem { Object oriented handling of authentication }
@ListItem { Classes for creating "\""XML"/"RPC"\"" clients and servers. }
@ListItem { Classes for creating syndicated XML feeds such as RSS and Atom
feeds. }
@ListItem { Easy handling of files, directories and images. For images, there 
are some very straightforward functions that can create thumbnails of those
images. }
@ListItem { An object oriented interface for creating and sending email 
messages. }
@EndList

@LP
The Yellow Duck Framework tries to be as flexible as possible so that you can 
tailor it in such a way that it works according to the way you want it to work.
It's definitely not the framework that will solve all your needs, but for most 
web application related functions, you will find the Yellow Duck Framework a
very handig tool to get your work done faster and more reliably.

@LP
As you can see, no database connectivity is included in the framework. We did
this for some very specific reasons. The framework was tested with the native
database functions from PHP and also with both the PEAR and ADOdb database
libraries. All these libraries can be used in the Yellow Duck Framework without
any problems. We didn't want to link the framework to one specific database 
library in order to give you the option to choose which one suits your needs the 
best.

@End @Section

@Section
   @Title { Analyzing the workflow }
   @Tag { introduction_workflow }
@Begin

@LP
In the object oriented nature of the Yellow Duck Framework, each script that 
gets executed is based on a comman class, which is the YDRequest class. This 
class is smart enough to figure out which functions needs to be called using
parameters given in the url and also supports some advanced functions such as 
authentication handling.

@LP
Let's take a look at an example script to understand how this works:

@IndentedDisplay @Perl {
<?php

    require_once( dirname( __FILE__ ) . '/YDFramework2/YDF2_init.php' );

    require_once( 'YDRequest.php' );

    class sample1Request extends YDRequest {

        function sample1Request() {
            $this->YDRequest();
        }

        function actionDefault() {
            $this->setVar( 'title', 'sample1Request::actionDefault' );
            $this->outputTemplate();
        }

        function actionEdit() {
            $this->setVar( 'title', 'sample1Request::actionEdit' );
            $this->outputTemplate();
        }
    }

    require_once( dirname( __FILE__ ) . '/YDFramework2/YDF2_process.php' );

?>
}

@LP
The template file that goes along with this script looks as follows:

@IndentedDisplay @Perl {
<html>

<head>
    <title><?= $title ?></title>
</head>

<body>
    <?= $title ?>
</body>

</html>
}

@LP
When you request this script in your web browser, a number of things happen.
Everything that happens is done automatically by the workflow itself and doesn't
require any manual intervention from your part. In a future chapter, you will
see that this is not the only way of working with the Yellow Duck Framework.
Every single part of the Yellow Duck Framework can be changed to work exactly
the way you want it to work.

@LP
In the Yellow Duck Framework, all requests are always processed in the same way
and order. Let's evaluate the sample above step by step to explain how the
processing is happening.

@LP
The first line you see in the sample1.php script is the include of the file
called "\""YDF2_init.php"\"". This file is responsible for setting up the Yellow
Duck Framework, and does things such as:

@BulletList
@ListItem { Defining a number of constants with e.g. the path to specific 
directories and URLs }
@ListItem { Starts or restores the previous session } 
@ListItem { Reconfigures the PHP include path }
@ListItem { Includes the different files from the rest of the framework }
@EndList

@LP
After that, we define a new class, called "\""sample1Request"\"" which is based
on the YDRequest class. For each script, you need to have 1 class which is named
as the basename of the file (sample1 in this case) and is appended with the 
string "\""Request"\"". This class should have the YDRequest class as one of it
ancestors.

@LP
Since we are inheriting from the YDRequest class, we initialize the parent class
in the class constructor of the sample1Request class.

@LP
Then we see two functions that start with the text "\""action"\"". All functions
that implement actions start with "\""action"\"". We will see later on how you 
can choose which one gets executed.

@LP
The last part of the script is the include of the "\""YDF2_process.php"\""
script, which processes the actual request. It will look for a request class
based on the name of the file, and will execute the process function of that 
class. This is where the magic happens.

@LP
The process function checks the URL to see if there was a parameter defined with
the name "\""do"\"". This parameter can indicate the action that needs to be
executed. If the url looked as 
darkblue @Color { "http://localhost/sample1.php?do=edit" }, the function called 
"\""actionEdit"\"" will be executed.

@LP
If no action is specified in the url, the default action, called 
"\""actionDefault"\"" will be executed. In both actions, the functions in this
script don't do a lot. They will set a template variable called "\""title"\""
and they will output the template to the browser. The template contains special
tags that are filled in on the fly with the right contents.

@End @Section

@Section
   @Title { More about this user guide }
   @Tag { introduction_moreabout }
@Begin

@LP
Now that we discussed the basics of the Yellow Duck Framework and also explained
the ideas about it, we will go over each part in more detail. In the following 
chapters, all the different parts of the Yellow Duck Framework will be 
discussed.

@LP
For more information about the Yellow Duck Framework, we like to guide you to 
the website of the framework which can be found on 
darkblue @Color { "http://www.yellowduck.be/ydf2/" }.

@LP
On this website, you will find more information as well as the latest downloads
for the framework.

@End @Section

@EndSections

@End @Chapter
