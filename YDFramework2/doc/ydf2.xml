<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!DOCTYPE merge [ 
	<!ENTITY fo-related "pdf/postscript/rtf">
	<!ENTITY fop-related "pdf/postscript"> 
]>

<document>

    <document-meta-info>
        <title>Yellow Duck Framework - User Guide</title>
        <attribute name="Author">
            <a href="mailto:pieter@yellowduck.be">Pieter Claerhout</a>
        </attribute>
        <attribute name="Version">2.0.0</attribute>
    </document-meta-info>

    <document-formatting-info>
        <stylesheet url="style.css" />
        <stylesheet-fo url="style.css" />
        <left-margin>50pt</left-margin>
        <right-margin>40pt</right-margin>
        <top-margin>20pt</top-margin>
        <bottom-margin>20pt</bottom-margin>
        <generate-toc-page>yes</generate-toc-page>
        <header-height>60pt</header-height>
        <footer-height>30pt</footer-height>
    </document-formatting-info>

    <document-header>
        <table width="100%">
            <tr>
                <td valign="middle" align="left" width="50%">
                    Yellow Duck Framework - User Guide
                </td>
                <td valign="middle" align="right" width="50%">
                    <b><page-number /></b>
                </td>
            </tr>
        </table>
        <hr size="1" color="red" noshade="true" />
    </document-header>

    <document-body>

        <table-of-content>
            <link href="#ch01">Introducing the Yellow Duck Framework
                <link href="#ch01_01">Introduction</link>
                <link href="#ch01_02">Analyzing the workflow</link>
                <link href="#ch01_03">More about this user guide</link>
            </link>
            <link href="#ch02">Installing the Yellow Duck Framework
                <link href="#ch02_01">Prerequisites</link>
                <link href="#ch02_02">Examining the Yellow Duck Framework files</link>
                <link href="#ch02_03">Installation overview</link>
                <link href="#ch02_04">Finding a place for the YDFramework2 directory</link>
                <link href="#ch02_05">Assigning rights to the YDFramework2 directory</link>
                <link href="#ch02_06">Configuring Apache to allow .htaccess files</link>
                <link href="#ch02_07">Configuring the PHP options</link>
                <link href="#ch02_08">Denying direct access to the templates</link>
                <link href="#ch02_09">Using auto preprend and auto append</link>
                <link href="#ch02_10">Configuring the samples (advised)</link>
                <link href="#ch02_11">Testing the installation</link>
            </link>
            <link href="#ch03">Writing your first application
                <link href="#ch03_01">Description of the application</link>
                <link href="#ch03_02">Structuring the application</link>
                <link href="#ch03_03">Creating the directory and the files</link>
                <link href="#ch03_04">Implementing the basis of the index.php file</link>
                <link href="#ch03_05">Improving the class constructor</link>
                <link href="#ch03_06">Implementing the default action</link>
                <link href="#ch03_07">Implementing the template</link>
                <link href="#ch03_08">Implementing the addnote action</link>
                <link href="#ch03_09">Implementing the deletenote action</link>
                <link href="#ch03_10">The complete application</link>
            </link>
            <link href="#ch04">How requests are processed
                <link href="#ch04_01">Description</link>
                <link href="#ch04_02">Graphical overview</link>
                <link href="#ch04_03">Where is this processing happening?</link>
                <link href="#ch04_04">Step 1 - Check for a request class</link>
                <link href="#ch04_05">Step 2 - Is the request class derived from YDRequest?</link>
                <link href="#ch04_06">Step 3 - Is the request class properly initialized?</link>
                <link href="#ch04_07">Step 4 - Does this request requires authentication?</link>
                <link href="#ch04_08">Step 5 - Is the specified action allowed?</link>
                <link href="#ch04_09">Step 6 - Process the actual request</link>
                <link href="#ch04_10">What if?</link>
            </link>
            <link href="#ch05">Using templates
                <link href="#ch05_01">Introduction</link>
                <link href="#ch05_02">The YDTemplate class</link>
                <link href="#ch05_03">Template search paths</link>
                <link href="#ch05_04">Standard template variables</link>
                <link href="#ch05_05">PHP configuration for short open tags</link>
            </link>
            <link href="#ch06">Using and validating forms
                <link href="#ch06_01">Background information</link>
                <link href="#ch06_02">The YDForm class</link>
                <link href="#ch06_03">Creating a new form</link>
                <link href="#ch06_04">Adding form elements</link>
                <link href="#ch06_05">The different form elements</link>
                <link href="#ch06_06">Displaying the form</link>
                <link href="#ch06_07">Validating forms</link>
                <link href="#ch06_08">Processing forms</link>
                <link href="#ch06_09">More information</link>
            </link>
            <link href="#ch07">Accessing database contents
                <link href="#ch07_01">Introduction</link>
                <link href="#ch07_02">Supported database engines</link>
                <link href="#ch07_03">DSN - Data Source Names</link>
                <link href="#ch07_04">The YDDatabase and YDSql classes</link>
                <link href="#ch07_05">Specifying variables in SQL queries</link>
                <link href="#ch07_06">Getting and sending data to a data source</link>
            </link>
            <link href="#ch08">How to handle authentication
                <link href="#ch08_01">Overview</link>
                <link href="#ch08_02">Example 1 - IP based authentication</link>
                <link href="#ch08_03">Example 2 - Basic HTTP authentication</link>
                <link href="#ch08_04">Example 3 - Form based authentication</link>
            </link>
            <link href="#ch09">Using files, images and directories
                <link href="#ch09_01">Introduction</link>
                <link href="#ch09_02">Why this abstraction?</link>
                <link href="#ch09_03">Using files</link>
                <link href="#ch09_04">Using images</link>
                <link href="#ch09_05">Using directories</link>
            </link>
            <link href="#ch10">Using URLs and downloading data
                <link href="#ch10_01">Introduction</link>
                <link href="#ch10_02">Raw HTTP connections</link>
                <link href="#ch10_03">The YDUrl class</link>
                <link href="#ch10_04">Caching of downloaded data</link>
            </link>
            <link href="#ch11">Using XML/RPC clients and servers
                <link href="#ch11_01">What is XML/RPC?</link>
                <link href="#ch11_02">Using YDXmlRpcClient</link>
                <link href="#ch11_03">Using YDXmlRpcServer</link>
                <link href="#ch11_04">More information</link>
            </link>
            <link href="#ch12">Sending emails
                <link href="#ch12_01">Introduction</link>
                <link href="#ch12_02">The YDEmail class</link>
                <link href="#ch12_03">An example</link>
                <link href="#ch12_04">Combining YDTemplate and YDEmail</link>
            </link>
            <link href="#ch13">Creating RSS and ATOM feeds
                <link href="#ch13_01">What is RSS and ATOM?</link>
                <link href="#ch13_02">Setting up the feed</link>
                <link href="#ch13_03">Adding items</link>
                <link href="#ch13_04">Outputting the feed</link>
                <link href="#ch13_05">More information</link>
            </link>
            <link href="#ch14">Debugging tools
                <link href="#ch14_01">Overview</link>
                <link href="#ch14_02">Showing debug information</link>
                <link href="#ch14_03">Standard debug information</link>
                <link href="#ch14_04">Adding debugging information</link>
            </link>
            <link href="#ch15">Other classes and modules
                <link href="#ch15_01">What is discussed in this chapter?</link>
                <link href="#ch15_02">YDArrayUtil</link>
                <link href="#ch15_03">YDBrowserInfo</link>
                <link href="#ch15_04">YDError</link>
                <link href="#ch15_05">YDLanguage</link>
                <link href="#ch15_06">YDObjectUtil</link>
                <link href="#ch15_07">YDTimer</link>
            </link>
        </table-of-content>
    
        <section name="ch01" label="Introducing the Yellow Duck Framework" />

            <section name="ch01_01" label="Introduction">

                <br/>

                The Yellow Duck framework is web application framework created 
                by Pieter Claerhout. More information can be found on 
                <a target="_blank" href="http://www.yellowduck.be/">http://www.yellowduck.be/</a>.

                <br/><br/>

                The Yellow Duck Framework takes care of all the difficult work
                you normally have to perform manually when developing a web
                application. It is based on the idea of requests that can 
                perform actions. By encapsulating all the programming in an
                object-oriented environment, you get a framework that is easy 
                to use and understand, easy to extend and doesn't limit you in 
                any way.

                <div><ul>
                    <li>Clean separation of code and output</li>
                    <li>Templates for outputting HTML easily</li>
                    <li>Automatic action dispatching using URL parameters</li>
                    <li>Object oriented form construction and validation</li>
                    <li>PEAR based database connectivity which supports all 
                    major database engines such as MySQL, PostgreSQL, Oracle, 
                    Microsoft SQL Server, ...</li>
                    <li>Object oriented handling of authentication</li>
                    <li>Classes for creating XML/RPC clients and servers.</li>
                    <li>Classes for creating syndicated XML feeds such as RSS
                    and Atom feeds.</li>
                    <li>Easy handling of files, directories and images. For
                    images, there are some very straightforward functions that
                    can create thumbnails of those images.</li>
                    <li>An object oriented interface for creating and sending
                    email messages.</li>
                </ul></div>

                The Yellow Duck Framework tries to be as flexible as possible so
                that you can tailor it in such a way that it works according to 
                the way you want it to work. It's definitely not the framework
                that will solve all your needs, but for most web application
                related functions, you will find the Yellow Duck Framework a
                very handig tool to get your work done faster and more
                reliably.

            </section>

            <section name="ch01_02" label="Analyzing the workflow">

                <br/>

                In the object oriented nature of the Yellow Duck Framework, each 
                script that gets executed is based on the YDRequest class. This 
                class is smart enough to figure out which functions needs to be
                called using parameters given in the url.

                <br/><br/>

                Let's take a look at an example script to understand how this 
                works:
                
                <pre><font color="#0000FF">&lt;?php</font>

<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_init.php'</font><font color="#000033"> </font><font color="#000000">);</font> 

<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDRequest.php'</font><font color="#000033"> </font><font color="#000000">);</font> 

<font color="#7F007F">class</font><font color="#000033"> sample1Request </font><font color="#7F007F">extends</font><font color="#000033"> YDRequest </font><font color="#000000">{</font> 

<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> sample1Request</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">YDRequest</font><font color="#000000">();</font> 
<font color="#000033">    </font><font color="#000000">}</font> 

<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionDefault</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'sample1Request::actionDefault'</font><font color="#000033"> </font><font color="#000000">);</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font> 
<font color="#000033">    </font><font color="#000000">}</font> 

<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionEdit</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'sample1Request::actionEdit'</font><font color="#000033"> </font><font color="#000000">);</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font> 
<font color="#000033">    </font><font color="#000000">}</font> 

<font color="#000000">}</font>

<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_process.php'</font><font color="#000033"> </font><font color="#000000">);</font> 

<font color="#0000FF">?&gt;</font></pre>
                
                The template file that goes along with this script looks as
                follows:

                <pre><font color="#000080">&lt;html&gt;</font>
<font color="#000080">&lt;head&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$title</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000080">&lt;/head&gt;</font>
<font color="#000080">&lt;body&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$title</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000080">&lt;/body&gt;</font>
<font color="#000080">&lt;/html&gt;</font>
<font color="#000000"></font></pre>

                When you request the following URL, a number of things happen:

                <pre>http://localhost/sample1.php</pre>

                The first line you see in the sample1.php script is the include 
                of the file called "YDF2_init.php". This file is responsible for 
                setting up the Yellow  Duck Framework, and does things such as:

                <div><ul>
                    <li>Defining a number of constants with e.g. the path to
                    specific directories and URLs</li>
                    <li>Starts or restores the previous session</li> 
                    <li>Reconfigures the PHP include path</li>
                    <li>Includes the different files from the rest of the 
                    framework</li>
                </ul></div>

                After that, we define a new class, called "sample1Request" which 
                is based on the YDRequest class. For each script, you need to 
                have 1 class which is named as the basename of the file (sample1 
                in this case) and is appended with the string "Request". This 
                class should have the YDRequest class as one of it ancestors.

                <br/><br/>

                Since we are inheriting from the YDRequest class, we initialize 
                the parent class in the class constructor of the sample1Request
                class.

                <br/><br/>

                Then we see two functions that start with the text "action". All
                functions that implement actions start with "action". We will 
                see later on how you can choose which one gets executed.

                <br/><br/>
                The last part of the script is the include of the
                "YDF2_process.php" script, which processes the actual request.
                It will look for a request class based on the name of the file,
                and will execute the process function of that class. This is
                where the magic happens.

                <br/><br/>

                The process function checks the URL to see if there was a
                parameter defined with the name "do". This parameter can
                indicate the action that needs to be executed. If the url looked
                as follows, the function called "actionEdit" will be executed.

                <pre>http://localhost/sample1.php?do=edit</pre>

                If no action is specified in the url, the default action,
                called "actionDefault" will be executed. In both actions, the 
                functions in this script don't do a lot. 
                They will set a template variable called "title" and they will 
                output the template to the browser. The template contains 
                special tags that are filled in on the fly with the right 
                contents.

            </section>

            <section name="ch01_03" label="More about this user guide">

                <br/>

                Now that we discussed the basics of the Yellow Duck Framework
                and also explained the ideas about it, we will go over each part
                in more detail. In the following chapters, all the different
                parts of the Yellow Duck Framework will be discussed.

                <br/><br/>

                The following items will be discussed in this user guide:

                <div><ul>
                    <li>Installing the Yellow Duck Framework</li>
                    <li>Writing your first application</li>
                    <li>How requests are processed</li>
                    <li>Using templates</li>
                    <li>Using and validating forms</li>
                    <li>Accessing database contents</li>
                    <li>How to handle authentication</li>
                    <li>Using files, images and directories</li>
                    <li>Using URLs and downloading data</li>
                    <li>Using XML/RPC clients and servers</li>
                    <li>Sending emails</li>
                    <li>Creating RSS and ATOM feeds</li>
                    <li>Debugging tools</li>
                    <li>Other classes and modules</li>
                </ul></div>

                For more information about the Yellow Duck Framework, we like to
                guide you to the website of the framework which can be found on:

                <br/><br/>

                <a target="_blank" href="http://www.yellowduck.be/ydf2/">http://www.yellowduck.be/ydf2/</a>

                <br/><br/>

                On this website, you will find more information as well as the
                latest downloads for the framework.

                <page-break />

            </section>

        <section name="ch02" label="Installing the Yellow Duck Framework" />

            <section name="ch02_01" label="Prerequisites">

                <br/>

                To use the Yellow Duck Framework, you need to have the following prerequisites:

                <div><ul>
                    <li>PHP version 4.x (tested with PHP 4.3)</li>
                    <li>Webserver capable of running PHP script, such as Apache or Microsoft Internet
                    Information Server</li>
                </ul></div>
              
                The Yellow Duck Framework was primarily tested on the Windows
                platform and also has undergone extensive testing on Linux based
                systems. Currently, the Yellow Duck Framework is only supported
                with PHP version 4. Support for PHP version 5 will be added in 
                the future.

            </section>

            <section name="ch02_02" label="Examining the Yellow Duck Framework files">

                <br/>
                
                When you downloaded the latest release of the Yellow Duck 
                Framework, you need to decompress it unzip e.g. winzip (Winzip) 
                or the tar command (unix/linux). After decompressing, you will 
                have the following directory structure:

                <pre>+- YDFramework-2.0.0
   +- index.php
   +- index.tpl
   +- ...
   +- YDFramework2
      +- 3rdparty
      +- docs
      +- temp
      +- YDClasses</pre>

                The main directory of the framework, called "YDFramework-2.0.0"
                in this example, contains a number of sample files. In this
                directory, there is also a directory called "YDFramework2",
                which contains the actual framework files. There are a number of
                subdirectories in the YDFramework2 directory which each have a
                specific function:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Directory</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">3rdparty</td>
                        <td>This directory contains the third party libraries 
                        that are needed for the Yellow Duck Framework to work 
                        properly. You will find a local copy of the PEAR 
                        libraries and the other third party libraries in
                        here.</td>
                    </tr>
                    <tr>
                        <td valign="top">docs</td>
                        <td>This directory contains the documentation at which
                        you are currently looking. It also contains the complete
                        API documentation.</td>
                    </tr>
                    <tr>
                        <td valign="top">temp</td>
                        <td>This directory contains the temporary files created 
                        by the framework. In here, the cache files for the 
                        thumbnails and web downloads will be saved.</td>
                    </tr>
                    <tr>
                        <td valign="top">YDClasses</td>
                        <td>In here, you will find all the classes that make up 
                        the framework.</td>
                    </tr>
                </table></p>

                This directory structure is not really important for using the
                Yellow Duck Framework. The only thing you might need to do from
                time to time is to check the temp folder and empty it if it gets
                too big.

                <br/><br/>

                <i><b>Note</b>: You will never have to add or alter files in the 
                YDFramework2 directory. It's not even a good idea to put your
                own files in there as they might get overridden when you upgrade 
                your framework to a newer version.</i>

            </section>

            <section name="ch02_03" label="Installation overview">

                <br/>

                There are a number of steps we need to do to get the framework 
                installed properly. The install instructions here apply to the
                Apache webserver, but similar techniques are available on other
                servers.

                <br/><br/>

                These are the steps needed to install the framework:

                <div><ol>
                    <li>Finding a place for the YDFramework2 directory</li>
                    <li>Assigning rights to the YDFramework2 directory</li>
                    <li>Configuring Apache to allow .htaccess files</li> 
                    <li>Configuring the PHP options</li> 
                    <li>Denying direct access to the templates</li> 
                    <li>Using auto preprend and auto append</li> 
                    <li>Configuring the samples</li> 
                    <li>Testing the installation</li>
                </ol></div>

                The next sections describe these steps in detail.

            </section>

            <section name="ch02_04" label="Finding a place for the YDFramework2 directory">

                <br/>

                The YDFramework2 directory can be placed anywhere in the file 
                system. For security reasons, we suggest you to put the
                YDFramework directory in a directory which is not viewable by
                the webserver. It's not a good idea to put the YDFramework2
                directory into the htdocs folders from Apache.

                <br/><br/>

                The YDFramework2 directory can also be shared among multiple web
                applications. You only need 1 YDFramework2 directory on your 
                system. You can if you want install a separate copy for each 
                web application.

            </section>

            <section name="ch02_05" label="Assigning rights to the YDFramework2 directory">

                <br/>

                Since the framework needs to be able to write temporary data 
                into it's temp directory, we need to change the rights for this 
                folder. On Windows, you normally don't need to change this. On a 
                unix or linux system, you can issue the following command to do
                this:

                <pre>/home/pieter # <b>chmod 777 YDFramework2/temp</b></pre>

                If you are uploading the framework using your FTP client, please
                check the documentation of your FTP client on how to do this.

            </section>

            <section name="ch02_06" label="Configuring Apache to allow .htaccess files">

                <br/>

                <i><b>Note</b>: this is an optional setting and is already done 
                on most systems. You only need to change this if you plan to use 
                .htaccess files to change the PHP settings or if you want to 
                deny access to the template files.</i>

                <br/><br/>

                In the Apache configuration file, you need to change the 
                following for the web directory of your web application:

                <pre><font color="#000080">&lt;Directory "C:/Program Files/Apache/htdocs"&gt;</font>
    AllowOverride All
<font color="#000080">&lt;/Directory&gt;</font></pre>

                With configuring the directory like this in Apache, you indicate 
                that .htaccess files can be used to override the settings.

            </section>

            <section name="ch02_07" label="Configuring the PHP options">

                <br/>

                Now that we configured Apache to accept .htaccess files, create 
                a new file called ".htaccess" and save it in the root of your
                web application. The settings done in the .htaccess file apply
                to the directory in which the file is stored and to all the 
                directories underneath that directory.

                <br/><br/>

                I've added the following configuration values for PHP to the 
                .htaccess file on my system:

                <pre><font color="#007F00"># Disable magic quotes</font>
php_value magic_quotes_gpc 0
php_value magic_quotes_runtime 0
php_value magic_quotes_sybase 0

<font color="#007F00"># Disabled registering of globals and arg*</font>
php_value register_globals 0
php_value register_argc_argv 0

<font color="#007F00"># Disallow some security holes</font>
php_value allow_call_time_pass_reference 0
php_value allow_url_fopen 1
php_flag short_open_tag On
php_flag enable_dl Off

<font color="#007F00"># Gzip compress the output</font>
php_flag output_buffering Off
php_flag zlib.output_compression On</pre>

                With these options turned on, you will have Gzip compressed
                output from the PHP scripts which helps you save bandwith. 
                Registering of global variables and friends are also turned off,
                and magic quotes are disabled.

                <br/><br/>

                In the installation download, there is a sample .htaccess file 
                included which is called "_default.htaccess". Copy it to the 
                root of your web directory and rename it to ".htaccess".

                <br/><br/>

                <i><b>Note</b>: In order to have the examples working, you need 
                to allow short open tags. this can be done by add the following 
                to the .htaccess file:
                    <pre>php_flag short_open_tag On</pre>
                This will enable the use of "&lt;?" as the open tag for PHP
                scripts instead of the standard "&lt;?php".</i>

            </section>

            <section name="ch02_08" label="Denying direct access to the templates">

                <br/>

                Since we do not want people to access the template files 
                directly, we need to tell Apache to deny access to these files. 
                This can be done by adding the following code to the .htaccess
                file:

                <pre><font color="#007F00"># Denying direct access to the templates</font>
<font color="#000080">&lt;FilesMatch "(.tpl|config.php|includes)$"&gt;</font>
    Order allow,deny
    Deny from all
<font color="#000080">&lt;/FilesMatch&gt;</font></pre>

                In the example above, I also denied access to the config.php 
                file, as I do not want people to access this file directly. 
                Access to the YDFramework2 and include directories are also
                denied.

            </section>

            <section name="ch02_09" label="Using auto preprend and auto append">

                <br/>

                Instead of having to include the "YDF2_init.php" and 
                "YDF2_process.php" files manually in each script, you can use 
                the auto preprend and auto append options provided by the PHP
                interpreter.

                <br/><br/>

                To enable this feature, add the following lines to the .htaccess 
                file:
                
                <pre><font color="#007F00"># Auto include the Framework files</font>
php_value auto_prepend_file "C:/YDFramework2/YDF2_init.php"
php_value auto_append_file "C:/YDFramework2/YDF2_process.php"</pre>

                On Windows, please use forward slashes instead of backslashes. 
                Also make sure you use the complete path to the files.

            </section>

            <section name="ch02_10" label="Configuring the samples">

                <br/>

                In order to run the samples, we need to edit the configuration 
                file to point to an existing database and we also need to change 
                the paths to the framework files.

                <br/><br/>

                Open the file called "config.php" which is found in the main 
                directory of the download, and edit the database settings:

                <pre><font color="#0000FF">&lt;?php</font>

<font color="#000033">    </font><font color="#999999">/*</font>
<font color="#999999">     * Very simple configuration file</font>
<font color="#999999">     */</font>

<font color="#000033">    </font><font color="#00007F">$dbAliasses</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'localhost_mysql'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'mysql://root:@localhost/test'</font>
<font color="#000033">    </font><font color="#000000">);</font>

<font color="#0000FF">?&gt;</font></pre>

                Once that is done, open each PHP script in the main directory of
                the download, and change the include settings at the top and the
                bottom of the file if needed.

            </section>

            <section name="ch02_11" label="Testing the installation">

                <br/>

                To test the installation, run the sample scripts provided with 
                the downloads.

                <page-break />

            </section>

        <section name="ch03" label="Writing your first application" />

            <section name="ch03_01" label="Description of the application">
                
                <br/>

                The sample application we are going to use is a simple notebook
                which has three options. The following options are supported by 
                our notebook:

                <div><ul>
                    <li>Showing the list of notes (default)</li>
                    <li>Adding a note</li>
                    <li>Deleting a note</li>
                </ul></div>

                We will also use form validation to make sure that the data 
                entered in the add note form is valid. This will prevent people
                from adding notes without a title or body.

                <br/><br/>

                After you finished this chapter, the finished example  
                application will look like this:

                <br/><br/>

                <img src="ydf2_02_001.gif" border="0" width="415" height="286" />

                <br/><br/>

                The screen above is used for listing and deleting notes. This
                screen will also show you a link to the screen that is used for
                adding new notes.

                <br/><br/>

                The interface for adding a new note will look as follows:

                <br/><br/>

                <img src="ydf2_02_002.gif" border="0" width="415" height="286" />

                <br/><br/>

                The delete screen doesn't really have a user interface. It will
                remove the item from the list and reload the list once that is 
                done.

                <br/><br/>

                <i><b>Note</b>: In order no to over complicate this example, we 
                will store the notes as files on the disk instead of using a 
                database.</i>

            </section>

            <section name="ch03_02" label="Structuring the application">
                
                <br/>

                Before you start writing the actual code, you need to do a 
                little bit of planning and determine which actions you will 
                create to make your application work. In our case, we are going 
                to make 3 different actions:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Action</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">default</td>
                        <td>This is the default action and will show the list of 
                        notes. If no notes are found, it should tell us so.</td>
                    </tr>
                    <tr>
                        <td valign="top">addnote</td>
                        <td>This action will take care of adding a new note. It
                        will render the form you need to fill in, but it will 
                        also take care of handling the form correctly and saving 
                        the result to disk.</td>
                    </tr>
                    <tr>
                        <td valign="top">deletenote</td>
                        <td>This function will delete a note based on it's 
                        unique ID. In this example, it will not ask you for
                        confirmation, but it will simply delete the note.</td>
                    </tr>
                </table></p>

                Now that we know what actions the application will be able to 
                perform, we now need to think about how we can store the notes 
                on disk. We will create an associative array for each note which 
                will contain the title, body and the unique ID for the entry.

                <br/><br/>

                The unique ID for an entry will be created by calculating the 
                md5 checksum of the combination of the title and the body. This 
                will ensure that each note is unique.

                <br/><br/>

                <i><b>Note</b>: the example will not warn about the fact that a
                duplicate entry was entered. It will just overwrite the existing 
                one. I'll leave it up to you to implement that yourself after
                finishing this chapter.</i>

                <br/><br/>

                We will use the functions provided by the Yellow Duck Framework 
                to load the notes from disk and save the notes to disk. In the 
                framework, there are different objects and functions that take 
                care of this.

                <br/><br/>

                After going through this example, you will have used and 
                explored the following classes and modules in the Yellow Duck 
                Framework:
                
                <div><ul>
                    <li>YDRequest (class)</li>
                    <li>YDFSDirectory (class)</li>
                    <li>YDFSFile (class)</li>
                    <li>YDForm (class)</li>
                    <li>YDError and YDFatalError (classes)</li>
                    <li>YDObjectUtil (module)</li>
                </ul></div>

                For more detailed information of the functions and variables
                exposed by these classes, consult the <a target="_blank"
                href="api/index.html">API documentation</a>.

            </section>

            <section name="ch03_03" label="Creating the directory and the files">
                
                <br/>

                To start, create a new folder in your webroot called "firstapp". 
                We will store all the files related to this tutorial in that 
                folder.

                <br/><br/>
                
                In this folder, we will need to create two files for our 
                application. We need 1 file called "index.php", which will 
                contain the actual script that drives the application. We will 
                also need a file which is called "index.tpl" which contains the
                template for this application. The template will define how the
                application will be presented in the browser.

                <br/><br/>
                
                By separating the actual script from the presentation, we will
                make the application a lot easier to maintain and understand. By 
                using this structured way, it will be a lot easier to track down 
                problems because you know immediately where to look.

            </section>

            <section name="ch03_04" label="Implementing the basis of the index.php file">
                
                <br/>

                The first thing we will do is to implement the basic stuff of 
                the index.php script. As you could read in the first chapter, 
                the name of the file determines how the class should be named.

                <br/><br/>

                Open the index.php file in a text editor and enter the following
                text in the file:

                <pre><font color="#0000FF">&lt;?php</font>

<font color="#666666">// Initialize the Yellow Duck Framework</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_init.php'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Includes</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDRequest.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDFSDirectory.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDObjectUtil.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDForm.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDError.php'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Class definition for the index request</font>
<font color="#7F007F">class</font><font color="#000033"> indexRequest </font><font color="#7F007F">extends</font><font color="#000033"> YDRequest </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Class constructor</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> indexRequest</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Initialize the parent class</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">YDRequest</font><font color="#000000">();</font>

<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Default action</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionDefault</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Add Note action</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionAddNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Delete Note action</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionDeleteNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000000">}</font>

<font color="#666666">// Process the request</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_process.php'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#0000FF">?&gt;</font></pre>

                There are a number of rules to follow to get the basis of the 
                class implemented. Let's go over each one of them:

                <div><ol>
                    <li><b>Include the init file</b>: each script that wants to 
                    use the Yellow Duck Framework needs to include the 
                    "YDF2_init.php" file which initializes the framework. Make 
                    sure the path to this file is correct, otherwise, the script
                    will not work.</li>
                    <li><b>Include the needed classes</b>: The next step is to
                    include all the different classes from the framework you are
                    going to use. I used the require_once to make sure the
                    script doesn't continue without having included these files.
                    You don't need to specify the complete path to these files
                    as the framework will take care of finding the right files.
                    </li>
                    <li><b>Define the main class</b>: each script that wants to
                    use the Yellow Duck Framework needs to have a class which 
                    is named after the name of the file. In our example, the 
                    file is named "index.php", which means the framework will
                    search for a class called "indexRequest". This class needs
                    to extends the YDRequest class to allow the framework to 
                    process the request.</li>
                    <li><b>Define the class constructor</b>: When the instance 
                    of our class is created, it will execute the function which 
                    has the same name as the class automatically (this function 
                    is called the class constructor). In the class constructor, 
                    we simply call the YDRequest function (which is the class 
                    constructor from the YDRequest class) to make sure the 
                    parent class is initialized as well.</li>
                    <li><b>Define the functions for the actions</b>: For each 
                    action, we need to create a separate function in the class. 
                    Each function for an action has the name of the action 
                    prepended by "action" as it's function name. By default, 
                    these function do not require any arguments.</li>
                </ol></div>
                
                With this implemented, you can already surf to the index.php
                page, but nothing will be shown. You can try the following URLs:
              
                <pre>http://localhost/firstapp/index.php
http://localhost/firstapp/index.php?do=addnote
http://localhost/firstapp/index.php?do=deletenote
http://localhost/firstapp/index.php?do=oops</pre>

                If you typed in everything correctly, only the last URL should
                return an error because it's pointing to an undefined action in
                our class.

            </section>

            <section name="ch03_05" label="Improving the class constructor">
                
                <br/>

                We will add one thing to the class constructor, which is a 
                reference to the data directory. Before you add the code, make a
                new folder called "data" in the "firstapp" folder. Also make 
                sure that the webserver process can write into that directory. 
                On unix systems, you can do this with the following shell 
                command:

                <pre>/home/pieter # <b>chmod 777 data</b></pre>
                
                Once you did that, add the following code to the class 
                constructor:

                <pre><font color="#666666">// Set the path to the data directory</font>
<font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDFSDirectory</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/data/'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Check if the data directory is writeable</font>
<font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#000000">!</font><font color="#000033"> </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">isWriteable</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#7F007F">new</font><font color="#000033"> YDFatalError</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'Data directory must be writable!'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000000">}</font></pre>
                
                With this code, we create a new YDFSDirectory class which 
                represents a folder on disk. We define it specifically create it 
                in the class constructor to ensure that all the actions are able
                to use this object (each action needs this).

                <br/><br/>

                We also check if the directory is writeable by the webserver 
                process to ensure that we will be able to save the notes in that 
                directory. If the directory is not writable, we will raise a 
                fatal error which stops the execution and displays the error 
                message.

                <br/><br/>

                Later on, we will see that we can use this object to get a 
                directory listing, but we will also use it to delete and create 
                new files.

            </section>

            <section name="ch03_06" label="Improving the class constructor">
                
                <br/>

                We will now implement the default action. Add the following code
                to the function actionDefault:

                <pre><font color="#666666">// Default action</font>
<font color="#7F007F">function</font><font color="#000033"> actionDefault</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Start with an empty list of entries</font>
<font color="#000033">    </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">();</font>

<font color="#000033">    </font><font color="#666666">// Loop over the data directory contents</font>
<font color="#000033">    </font><font color="#7F007F">foreach</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'*.dat'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Get the contents</font>
<font color="#000033">        </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">();</font>

<font color="#000033">        </font><font color="#666666">// Unserialize</font>
<font color="#000033">        </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">unserialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Add it to the list of entries</font>
<font color="#000033">        array_push</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Add the entries to the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'entries'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Output the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font>

<font color="#000000">}</font></pre>

                The code of this function is pretty self explanatory. Let's go 
                over each line to see what it does:

                <pre><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">();</font></pre>

                This line creates a new array which will use to store the
                entries in. 

                <pre><font color="#7F007F">foreach</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'*.dat'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font></pre>

                This line line will query the data directory and get a YDFSFile 
                object for each file that ends with the extension "dat". The 
                getContents function always returns objects.

                <pre><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">();</font></pre>

                This line line will replace the variable $entry with the
                contents of our YDFSFile object. 

                <pre><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">unserialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Since the entries are serialized, we need to unserialize them to 
                get the original object back. The YDObjectUtil::unserialize 
                function will take care of this.

                <pre><font color="#000033">array_push</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                We now have the original object back, which we will just add to 
                the list of entries.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'entries'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                When a new YDRequest class is instantiated, automatically a new
                template object is created. You can then use the setVar function 
                from the YDRequest class to assign variables to the template. We
                add a new template variable called "entries" which holds the 
                list of entries.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font></pre>

                The last step is to parse the template and output it to the 
                browser. Since we didn't specify the name of the template, it 
                will look for a file with the same name as the script, but which 
                has the extension "tpl" instead of "php". It will parse the 
                template and send the result to the browser.

                <br/><br/>

                If you run the script now in the browser, you will see an empty 
                screen, and no errors should be shown. You don't see anything 
                yet since the template is still an empty file.

            </section>

            <section name="ch03_07" label="Implementing the template">
                
                <br/>

                Now that we have the default action implemented, we will change
                the template so that it shows the list of notes which it should
                do. Here's is how the template looks like to show the list of 
                entries:

                <pre><font color="#000080">&lt;html&gt;</font>

<font color="#000080">&lt;head&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_FW_NAMEVERS</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>

<font color="#000080">&lt;/head&gt;</font>

<font color="#000080">&lt;body&gt;</font>

<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$YD_ACTION</font><font color="#000033"> </font><font color="#000000">==</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">        </font><font color="#000080">&lt;h3&gt;</font><font color="#000000">Notes</font><font color="#000080">&lt;/h3&gt;</font>

<font color="#000000">        </font><font color="#000080">&lt;p&gt;&lt;a</font><font color="#800080"> </font><font color="#008080">href</font><font color="#800080">=</font><font color="#7F007F">"</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_SELF_SCRIPT</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">?do=AddNote"</font><font color="#000080">&gt;</font><font color="#000000">Add a new note</font><font color="#000080">&lt;/a&gt;&lt;/p&gt;</font>

<font color="#000000">        </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">foreach</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;b&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/b&gt;</font>
<font color="#000000">                [ </font><font color="#000080">&lt;a</font><font color="#800080"> </font><font color="#008080">href</font><font color="#800080">=</font><font color="#7F007F">"</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_SELF_SCRIPT</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">?do=DeleteNote&amp;id=</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">"</font><font color="#000080">&gt;</font><font color="#000000">delete</font><font color="#000080">&lt;/a&gt;</font><font color="#000000"> ]</font>
<font color="#000000">                </font><font color="#000080">&lt;br&gt;</font>
<font color="#000000">                </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'body'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">        </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#7F007F">else</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;p&gt;</font><font color="#000000">No notes were found.</font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">        </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000080">&lt;/body&gt;</font>

<font color="#000080">&lt;/html&gt;</font></pre>

                The first thing we do in the template is to check if we are 
                running the default action. Since we are going to combine the 
                templates for all the different actions, we need to make sure we 
                only show the parts relevant for the current action.

                <br/><br/>

                As you can see, this is a plain PHP script which only contains 
                the code needed to display the list. As you can see, we can
                reference the variables as normal PHP variables and show their 
                contents.

                <br/><br/>

                We also use some special variables in the script that are 
                automatically added to the template by the framework. We use 
                the following ones:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Variable</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">$YD_FW_NAMEVERS</td>
                        <td>the name and the version of the framework</td>
                    </tr>
                    <tr>
                        <td valign="top">$YD_ACTION</td>
                        <td>the name of the current action (always in lowercase)
                        </td>
                    </tr>
                    <tr>
                        <td valign="top">$YD_SELF_SCRIPT</td>
                        <td>the url of the script itself without parameters</td>
                    </tr>
                </table></p>

                If you run the script now, it should tell you that no notes were
                found, as we didn't create any yet. There should also be a link
                that you can use to add a new entry. The next step is to create
                the form to add a new entry.

            </section>

            <section name="ch03_08" label="Implementing the addnote action">
                
                <br/>

                The next step is to implement the action that will take care of 
                adding new items. Add the following code to the actionAddEntry 
                function to do this:

                <pre><font color="#666666">// Add Note action</font>
<font color="#7F007F">function</font><font color="#000033"> actionAddNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Create the add form</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'addEntryForm'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Add the elements</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'text'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'textarea'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'submit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'cmdSubmit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Save'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Apply filters</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Add a rule</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Process the form</font>
<font color="#000033">    </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">validate</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Save the entries in an array</font>
<font color="#000033">        </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
<font color="#000033">            </font><font color="#009F00">'id'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> md5</font><font color="#000000">(</font>
<font color="#000033">                </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000033">            </font><font color="#000000">),</font>
<font color="#000033">            </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">),</font>
<font color="#000033">            </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000033">        </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Save the serialized entry to a file</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">createFile</font><font color="#000000">(</font>
<font color="#000033">            </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000000">,</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">serialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000033">        </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Forward to the list view</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Return</font>
<font color="#000033">        </font><font color="#7F007F">return</font><font color="#000000">;</font>

<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Add the form to the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">addForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'form'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Output the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font>

<font color="#000000">}</font></pre>

                This action does two separate things. It knows how to show the 
                form which is used to add a new note, and it also knows how to
                save a note to a file on disk which can be retrieved later on.
                
                <br/><br/>

                Let's evaluate this action step by step:

                <pre><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'addEntryForm'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                This will create a new form object called "addEntryForm". We 
                will assign elements to this object to construct the whole form.
                
                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'text'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'textarea'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'submit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'cmdSubmit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Save'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Now we add three elements to the form. We add a text element 
                called "title", a textarea called "body" and a submit button 
                called "cmdSubmit". For each of these elements, we also specify
                a label.

                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                To the title and body field, we also add a filter called "trim".
                The trim filter will remove all spaces at the beginning and the 
                end of the form values before validating the form. We do this to 
                make sure that e.g. if the title would be just a space, it 
                wouldn't be considered as being valid.

                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                For the validation, we add two rules. With these two rules, we 
                mark the elements title and body as required elements. We also 
                specify the error message in case the validation fails.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">addForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'form'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">);</font></pre>
                
                This function will assign the form object to the template. 
                Please note that we didn't use the setVar function, but used the
                addForm function instead. We need to use this function because 
                the form object needs some special treatment before it can be 
                used in the template. Never use the setVar function to assing a
                form object to the template. 

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font></pre>

                The last step is to parse and output the template which is done
                by executing the outputTemplate function. 

                <br/><br/>

                <i><b>Note</b>: I specifically didn't explain the part which 
                save the note to a file, as it's not important yet. You first 
                need to understand how this works before we can add the code for 
                saving the note to disk.</i>

                <br/><br/>

                Before you can run the form, we need to add the code for the 
                form to the template. Add the following stuff just before the 
                "&lt;/body&gt;" tag in the template:

                <pre><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$YD_ACTION</font><font color="#000033"> </font><font color="#000000">==</font><font color="#000033"> </font><font color="#009F00">'addnote'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;h3&gt;</font><font color="#000000">Add a new note</font><font color="#000080">&lt;/h3&gt;</font>

<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'errors'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p</font><font color="#800080"> </font><font color="#008080">style</font><font color="#800080">=</font><font color="#7F007F">"color: red"</font><font color="#000080">&gt;&lt;b&gt;</font><font color="#000000">Errors during processing:</font><font color="#000080">&lt;/b&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">foreach</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'errors'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$error</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;br&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$error</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;form</font><font color="#800080"> </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'attributes'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">][</font><font color="#009F00">'label'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;br&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">][</font><font color="#009F00">'html'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'body'</font><font color="#000000">][</font><font color="#009F00">'label'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;br&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'body'</font><font color="#000000">][</font><font color="#009F00">'html'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'cmdSubmit'</font><font color="#000000">][</font><font color="#009F00">'html'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/form&gt;</font>

<font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font></pre>

                If we a look at that code, we see that it will only be shown if
                the current action is called "addnote" (always in lowercase!). 
                The first part will take care of showing the errors if there are
                any.

                <br/><br/>

                The errors are always found in the $form['error'] array. this
                array is just a list of all the different error messages. In 
                this example, we use a little but of stylesheets to make them
                appear in red.

                <br/><br/>

                Then, the code for the form itself is added. We first define the 
                form tag, and use the $form['attributes'] variable to 
                automatically add all the parameters of the form such as the 
                action and method. The framework is smart enough to take care of
                that automatically.

                <br/><br/>

                Then we will add the different elements. Each element can be 
                referenced as $form[elementname]. In this example, we use the 
                label and html properties of each element. The label property 
                contains the label as specified when you created the form 
                object. The html property contains the HTML version of the 
                element.

                <br/><br/>

                This is the only code we need to add for the form. The framework
                will take care of remembering what was entered in each field and
                displays it when needed. It will also take care of the error
                messages.

                <br/><br/>

                Now that we have the basis of the form, you can surf to the 
                index.php page and see what happens. If you submit the form, you
                will see that the values are remembered accross submits, and 
                that the right errors are raised if the input was not valid.

                <br/><br/>

                Let's examine the code that saves the entry to disk. We'll go 
                over it step by step.

                <pre><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">validate</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font></pre>

                With this, we can check if the form was validated succesfully. 
                The form is only validated when all the validation rules were
                passed.

                <pre><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
    <font color="#009F00">'id'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> md5</font><font color="#000000">(</font>
        <font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
    <font color="#000000">),</font>
    <font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">),</font>
    <font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000000">);</font></pre>

                This code will create a new associative array with the 
                information of the entry. We can use the form's exportValue 
                function to get the value of a specific field of the form. We 
                used the md5 function to create the unique ID for the entry.

                <pre><font color="#666666">// Save the serialized entry to a file</font>
<font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">createFile</font><font color="#000000">(</font>
    <font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000000">,</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">serialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000000">);</font></pre>

                The next line does two things. First, it will serialize the 
                array of the object. This means it's converted into code which
                can be saved to a file, and which can be read later on again to
                get the original array back. This function is part of the 
                YDObjectUtil module. After we have the array as a serialized
                item, we can use the createFile function from the YDFSDirectory
                object to dump it to a file. The file name will be the id of the 
                entry with the extension "dat".

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Now that the note is saved to disk, we need to show the list of
                notes again. We have two options here. Either you do a redirect,
                which will redirect you to the url of the default action, but 
                this requires two HTTP interactions. A lot faster is to forward
                the execution to a different action. The difference is that 
                forwarding happens in the same request.

                <pre><font color="#7F007F">return</font><font color="#000000">;</font></pre>

                It's very important to add the return statement, since 
                otherwise, the form will be displayed again.

                <br/><br/>

                <i><b>Note</b>: one could say that instead of forwarding the
                request to a different action, you could just call the function 
                for that action. Unfortunately, that doesn't work, since the 
                framework will not know that the current action has been 
                changed.</i>

                <br/><br/>

                If you run the script now, you will be able to add notes and 
                display them. Also try to add a note without a title or 
                description, and check that it is showing the right errors. Also
                check the contents of the data directory to see that the entries
                are correctly saved in there.

            </section>

            <section name="ch03_09" label="Implementing the deletenote action">
                
                <br/>

                To finish off, we will create the action that can delete a note.
                This action will take 1 parameter from the URL, which is called 
                ID. This entry will contain the unique ID of the entry.

                <br/><br/>

                To implement this action, add the following code to the 
                actiondeletenote function:

                <pre><font color="#666666">// Delete note action</font>
<font color="#7F007F">function</font><font color="#000033"> actionDeleteNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Delete the file related to the entry</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">deleteFile</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$_GET</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Forward to the list view</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000000">}</font></pre>

                Let's go over this action to see how it works:

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">deleteFile</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$_GET</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                With the deleteFile function from the YDFSDirectory object, we 
                can delete the file for this specific note. We find the id of 
                the note in the $_GET['id'] variable, which was passed with the
                URL.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                After the deletion of the file, we just forward the request to 
                the default action again to show the list of the notes.

                <br/><br/>

                After adding this code, you can run the sample again and try to
                delete a note. If you delete the note, it should disappear from
                the list and the file should also be removed from the data
                directory.

                <br/><br/>

                <i><b>Note</b>: there are some functions that could be added to 
                this action. First, it could check if there was an ID given or
                not. If not, you could forward the request to the default
                action, or you could show an error message. You could also add
                some checking to see if the entry exists or not before deleting
                it. Another option is to add a confirmation screen to prevent 
                that someone accidently deletes a note.</i>

            </section>

            <section name="ch03_10" label="The complete application">
                
                <br/>

                You will find a complete working copy of this application in the
                firstapp folder inside the examples folder of the Yellow Duck
                Framework distribution.

                <page-break />

            </section>


        <section name="ch04" label="How requests are processed" />

            <section name="ch04_01" label="Description">
                
                <br/>

                In this chapter, we will see how requests are processed. When 
                you load a request from the browser, a lot of things are 
                performed before the actual action is processed and the contents 
                is displayed to the end user.

            </section>

            <section name="ch04_02" label="Graphical overview">
                
                <br/>

                The following diagram gives you a graphical overview of how 
                requests are processed in the Yellow Duck Framework.

                <br/><br/>

                <img src="RequestProcessing.gif" width="667" height="759" 
                 border="0" />

                <br/><br/>

                This whole process of handling a request is automatically done 
                by the framework. There is no need to code this yourself. Of
                course, if you want, there are a number of things you can
                override in this workflow to make the framework do what you want
                it to do.

            </section>

            <section name="ch04_03" label="Where is this processing happening">
                
                <br/>

                When you load a file that includes the Yellow Duck Framework 
                using the following code, the file will be able to use the 
                functionality of the framework. Including the framework goes 
                as follows:

                <pre><font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDFramework2/YDF2_init.php'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                To process the actual file using the framework, we need to add 
                another include file, but we need to include this at the end of 
                the script. The last line of every script processed with the 
                Yellow Duck Framework should look as follows:

                <pre><font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDFramework2/YDF2_process.php'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The process script is the one that does what is displayed in the
                image above. Without including this file, nothing will be
                executed from the script and you will probably end up with an 
                empty page as the result.

                <br/><br/>

                Let's go over each step in the process to see how it works and
                what influence it has on the processing of the request.

            </section>

            <section name="ch04_04" label="Step 1 - Check for a request class">
                
                <br/>

                When you load a script, the first thing the framework will do is
                to check for a class which is named after the script file. The
                class name always has the same structure. It's basically the 
                basename of the script file with the text "Request" appended to 
                it. Let's take a look at some examples:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="50%"><b>Script name</b></td>
                        <td width="50%"><b>Class name</b></td>
                    </tr>
                    <tr>
                        <td>index.php</td>
                        <td>indexRequest</td>
                    </tr>
                    <tr>
                        <td>processing.php</td>
                        <td>processingRequest</td>
                    </tr>
                    <tr>
                        <td>MyOwnScriptForProcessing.php</td>
                        <td>MyOwnScriptForProcessingRequest</td>
                    </tr>
                </table></p>

                If no class with the given name is declared, the execution will 
                stop with a fatal error indicating this. The fatal error will 
                also stop the execution of the script.

                <br/><br/>

                <i><b>Note</b>: Class names are case insensitive in the Yellow 
                Duck Framework. However, we strongly suggest you to maintain the
                same case as in the filename.</i>

                <br/><br/>

                <i><b>Note</b>: Also note that some characters are not allowed
                as a class name, and as such are not allowed in the filename.
                Especially characters like a dash, a dollar sign,
                ad sign and an ampersand are not allowed.</i>

            </section>

            <section name="ch04_05" label="Step 2 - Is the request class derived from YDRequest?">
                
                <br/>

                The Yellow Duck Framework always expects that the request class 
                has the YDRequest class as one of it's parent classes. This is 
                needed because there are a number of standard functions from the
                YDRequest class that are always expected to be there.

                <br/><br/>

                You don't have to inherit from the YDRequest class directly.
                It's allowed to define your own request class based on the 
                YDRequest class, and inherit from that class instead. You can do
                this to provide basic functionality to your request classes 
                which is not available in the standard YDRequest class. You can
                also use this to change the way requests are processed so that 
                you can tailor the framework to suit your needs.

                <br/><br/>

                If the YDRequest is not one of the parent classes from the 
                request class, a fatal error is raised and the execution of 
                the script will be stopped.

            </section>

            <section name="ch04_06" label="Step 3 - Is the request class properly initialized?">
                
                <br/>

                Inheriting from the YDRequest class is one thing, but it also 
                needs to be initialized properly. In the class constructor, you 
                need to make sure you call the function with the same name as 
                the class name of the parent class to make sure the parent class
                is initialized properly. If you inherit from the YDRequest 
                directly, you code will look as follows:

                <pre><font color="#666666">// Inherit from the YDRequest class</font>
<font color="#7F007F">class</font><font color="#000033"> indexRequest </font><font color="#7F007F">extends</font><font color="#000033"> YDRequest </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// This is the class constructor for our class. It is</font>
<font color="#000033">    </font><font color="#666666">// automatically executed by the framework when this class</font>
<font color="#000033">    </font><font color="#666666">// is instantiated.</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> indexRequest</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Initialize the parent class, which is the YDRequest</font>
<font color="#000033">        </font><font color="#666666">// class in this example.</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">YDRequest</font><font color="#000000">();</font>
<font color="#000033">    </font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000000">}</font></pre>

                If you would leave out the function call to YDRequest in the 
                above class, a fatal error will be raised indicating that the 
                YDRequest class was not properly initialized. The execution will
                stop at that moment.

                <br/><br/>

                If the YDRequest class was properly initialized, the framework
                will now create an instance of the request class. When 
                instantiating, no parameters are passed to the class constructor
                of the request class.

            </section>

            <section name="ch04_07" label="Step 4 - Does this request requires authentication?">
                
                <br/>

                In every request class, you can enable authentication. If you 
                enable authentication for a request class, the framework will 
                execute certain functions to check if the authentication before
                the request is processed.

                <br/><br/>

                You can enable authentication in a request class by using the 
                following code:

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setRequiresAuthentication</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">true</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                It will then use the function "isAuthenticated" from the request 
                class to find out if the user is already authenticated. If not, 
                the function "authenticationFailed" is executed which can e.g. 
                redirect to the login. page which takes care of the rest. After
                executing the "authenticationFailed" function, the execution of
                the script is stopped.

                <br/><br/>

                If the "isAuthenticated" function returns true, the class 
                function "authenticationSucceeded" is executed, after which the
                execution of the request continues. This function can for 
                example set a session variable indicating that we are logged in
                or can add an entry to the database.

                <br/><br/>

                Note: for an in depth look at how authentication is handled in 
                the framework, please go through the chapter 
                <section-link href="#ch08">How to handle authentication</section-link>.

            </section>

            <section name="ch04_08" label="Step 5 - Is the specified action allowed?">
                
                <br/>

                After the authentication tokens are checked, the framework will 
                check if the specified action is allowed by calling the 
                "isActionAllowed" function which returns a boolean indicating 
                this. This function can for example limit certain actions to 
                specific conditions such as the username.

                <br/><br/>

                If the "isActionAllowed" function returns false, the function 
                called "actionNotAllowed" will be executed. By default, this 
                function returns a fatal error indicating that the action is not 
                allowed. You can override this function to make this work the 
                way you want. After this function is executed, the processing of 
                the request will stop.

                <br/><br/>

                In the "isActionAllowed" function, you can use the class 
                function "getActionName" to get the name of the current action
                in lowercase. The action name is the same as what is specified 
                with the do function in the URL. If no action is specified, the
                text "default" will be returned which always points to the 
                default action.

            </section>

            <section name="ch04_09" label="Step 6 - Process the actual request">
                
                <br/>

                Now that all the different checks are performed, the process 
                function of the request class is executed. This will figure out
                the right function name for the function for the specified
                action, and it will execute this function.

            </section>

            <section name="ch04_10" label="What if?">
                
                <br/>

                <i>What if I want a different way to specify the actions?</i>

                <br/>

                If you want to specify a different way for the framework to 
                determine the actions, you will need to override the 
                "getActionName" function to make it determine the correct 
                action name

                <br/><br/>

                <i>What if I want a different way of processing the actions?</i>

                <br/>

                You will have to override the "process" function of the request 
                class for this. This will not change the way the different 
                checks are happening though (which is not advised by any means).

                <page-break />

            </section>

        <section name="ch05" label="Using templates" />

            <section name="ch05_01" label="Introduction">

                <br/>

                In this chapter, we will have a closer look at how the template 
                engine in the Yellow Duck Framework is working and how it's 
                implemented. The template engine in the framework is based on 
                PHP and follows the same syntax as any normal PHP file.

            </section>
            
            <section name="ch05_02" label="The YDTemplate class">

                <br/>

                For managing templates, there is a specific class class 
                YDTemplate. If you instantiate this class, you can assign 
                variables to it, and then, using these variables, you can output 
                a named template.

                <br/><br/>

                The following code sample gives you a small example on how this 
                works: 

                <pre><font color="#00007F">$array</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
<font color="#000033">    array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'author'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Stephen King'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'The Stand'</font>
<font color="#000033">    </font><font color="#000000">),</font>
<font color="#000033">    array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'author'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Neal Stephenson'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Cryptonomicon'</font>
<font color="#000033">    </font><font color="#000000">),</font>
<font color="#000033">    array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'author'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Milton Friedman'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Free to Choose'</font>
<font color="#000033">    </font><font color="#000000">)</font>
<font color="#000000">);</font>

<font color="#00007F">$template</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDTemplate</font><font color="#000000">();</font>
<font color="#00007F">$template</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'This is the title'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$template</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'array'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$array</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$template</font><font color="#000000">-&gt;</font><font color="#000033">getOutput</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'mytemplate'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The template for this code could look as follows:

                <pre><font color="#000080">&lt;html&gt;</font>

<font color="#000080">&lt;head&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$title</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000080">&lt;/head&gt;</font>

<font color="#000080">&lt;body&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> is_array</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$book</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">):</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;table&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;tr&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;th&gt;</font><font color="#000000">Author</font><font color="#000080">&lt;/th&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;th&gt;</font><font color="#000000">Title</font><font color="#000080">&lt;/th&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;/tr&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">foreach</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$book</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$key</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$val</font><font color="#000033"> </font><font color="#000000">):</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;tr&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;td&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$val</font><font color="#000000">[</font><font color="#009F00">'author'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/td&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;td&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$val</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/td&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;/tr&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">endforeach</font><font color="#000000">;</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/table&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">else</font><font color="#000000">:</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font><font color="#000000">There are no books to display.</font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">endif</font><font color="#000000">;</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000080">&lt;/body&gt;</font>

<font color="#000080">&lt;/html&gt;</font></pre>

                As you can see, we assigned two variables to our template 
                instance. Each variable you want to use in the template engine 
                needs to be assigned to the template instance before you can use 
                it. Assigning a variable to a template implies that we attach a 
                template variable name to a PHP object. These objects can be
                anything from an array, a simple string to even a complete 
                object.

                <br/><br/>

                Once we assigned all the variables, we can issue the "getOutput"
                function of the template class to get the result of the parsed 
                template. This function takes one argument, which is the name of 
                the template.

                <br/><br/>

                The name of the template you need to specify for the "getOutput"
                function is the basename of the template without the "tpl"
                extension. In our example, you would need the following files to
                make the example work:

                <div><ul>
                    <li><b>mytemplate.php</b>: the actual PHP script</li>
                    <li><b>mytemplate.tpl</b>: the template attached to the PHP script</li> 
                </ul></div>

                By convention, all templates have the extension "tpl". This is 
                also hardcoded in the framework itself. Please, stick to this 
                standard.

            </section>
            
            <section name="ch05_03" label="Template search paths">

                <br/>

                There are different ways on where the template engine will
                search for templates. By default, there are two possible ways of
                specifying the path for the templates:

                <div><ul>
                    <li><b>Template specified by base name</b>: this will cause 
                    the template engine to look in the same directory as the 
                    current script.</li>
                    <li><b>Template specified by a full path</b>: this will 
                    cause the template engine to look for the template at the 
                    specified path.</li> 
                </ul></div>
                
                If you want, you can override the default search path for the 
                templates. This is done by the class function "setTemplateDir" 
                of the template class. With this function, you can add an extra 
                path to the search path of the template class. After you added a
                new path, you can specify templates in that directory by their 
                basename instead of having to specify the full path for the 
                template.

            </section>
            
            <section name="ch05_04" label="Standard template variables">

                <br/>

                For each template, there are a number of standard variables 
                available which you can always reference. These variables all 
                start with "YD_" and are all uppercase. Here's the list of the 
                standard variables:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="30%"><b>Variable</b></td>
                        <td width="70%"><b>Explanantion</b></td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_NAME</td>
                        <td>name of the framework</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_VERSION</td>
                        <td>version of the framework</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_NAMEVERS</td>
                        <td>the combination of the two items above</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_HOMEPAGE</td>
                        <td>the homepage of the Yellow Duck Framework</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_SELF_SCRIPT</td>
                        <td>the current script's path, e.g. "/myapp/index.php"</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_SELF_URI</td>
                        <td>the URI which was given in order to access this page, e.g. 
                        "/myapp/index.php?do=edit"</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_ACTION_PARAM</td>
                        <td>the name of the $_GET parameter that specifies which action needs to 
                        be executed. This is "do" by convention.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_ENV</td>
                        <td>These variables are imported into PHP's global namespace from the 
                        environment under which the PHP parser is running.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_COOKIE</td>
                        <td>An associative array of variables passed to the current script via 
                        HTTP cookies.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_GET</td>
                        <td>An associative array of variables passed to the current script via 
                        the HTTP GET method.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_POST</td>
                        <td>An associative array of variables passed to the current script via 
                        the HTTP POST method.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FILES</td>
                        <td>An associative array of items uploaded to the current script via the
                        HTTP POST method.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_REQUEST</td>
                        <td>An associative array consisting of the contents of YD_GET, YD_POST 
                        and YD_COOKIE.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_SESSION</td>
                        <td>An associative array containing session variables available to the 
                        current script.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_GLOBALS</td>
                        <td>An associative array containing references to all variables which 
                        are currently defined in the global scope of the script.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_DB_SQLQ_CNT</td>
                        <td>Number of database queries that were performed.</td>
                    </tr>
                </table></p>
    
                Please do not use the "YD_" prefix for your own variables.
                This prefix is uniquely reserverd for the variables 
                automatically assigned by the Yellow Duck Framework.

            </section>

            <section name="ch05_05" label="PHP configuration for short open tags">

                <br/>

                Depending on how you want to write the PHP constructs, you might 
                need to enable the short open tags function in PHP. This is done
                by changing the PHP configuration in php.ini or using a
                .htaccess file. You will need to add the following line to 
                enable short open tags:

                <br/><br/>

                Using a .htaccess file
                <br/>
                <pre>php_flag short_open_tag On</pre>

                Using the php.ini file
                <br/>
                <pre>short_open_tag = On</pre>

                If you enable the short open tags, you will be able to shorten
                the following constructs in the templates:

                <pre><font color="#000000">Using the long notation:</font>
<font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$myVar</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">Using short open tags</font>
<font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$myVar</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font></pre>

                All the examples for the Yellow Duck Framework have been written 
                using short open tags. Make sure you have them enabled before 
                running the examples.

                <page-break />

            </section>

        <section name="ch06" label="Using and validating forms" />

            <section name="ch06_01" label="Background information">

                <br/>

                Processing and validating forms is probably one of the most
                time-consuming and most difficult things to handle in a web
                application. Forms can vary from very simple forms to really
                difficult forms, which makes having a unified system to handle
                all these forms a real time-saver.

                <br/><br/>

                By applying an object oriented approach to forms, and by
                providing different methods and objects to handle forms with
                ease, processing forms has become really easy and fast.

                <br/><br/>

                The form module in the Yellow Duck Framework is based on a 
                package from the <a target="_blank" href="http://pear.php.net/">PEAR</a>
                (PHP Extension and Application Repository) libraries. The
                package we used is called <a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.php">HTML_QuickForm</a>
                and provides most of the functionality. A number of additions
                were made to this package to make it more straightforward for
                using this in the Yellow Duck Framework.

            </section>

            <section name="ch06_02" label="The YDForm class">

                <br/>

                All te functionality for form handling in the Yellow Duck
                Framework is handled by a class called "YDForm". The YDForm
                class extends the HTML_QuickForm class to provide some 
                additional features only found in the Yellow Duck Framework.

                <br/><br/>

                In addition to the standard functions provided by the
                HTML_QuickForm class, the YDForm class provides one additional
                function, called "toArray", which converts the form object into
                an array suitable for using with the YDTemplate class.

                <br/><br/>

                For an overview of the standard functions for the HTML_QuickForm
                class, please have a look on the documentation page which you 
                can find on: <a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.php">http://pear.php.net/manual/en/package.html.html-quickform.php</a>.

            </section>

            <section name="ch06_03" label="Creating a new form">

                <br/>

                Creating a new form is done in two steps. First, you need to 
                include the class definition, and then you need to create an
                instance of the YDForm class. The following code sample will
                illustrate this:

                <pre><font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDForm.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'myForm'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The first line will include the correct class definition, while
                the second one will create an instance of the form class. The 
                class constructor takes a number of arguments, but only one is
                required, the rest is optional. Here's the list of parameters
                that you can pass when instantiating the form object.

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Argument</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">$name</td>
                        <td>The name of the form.</td>
                    </tr>
                    <tr>
                        <td valign="top">$method (optional)</td>
                        <td>Method used for submitting the form. Most of the 
                        times, this is either POST or GET.</td>
                    </tr>
                    <tr>
                        <td valign="top">$action (optional)</td>
                        <td>Action used for submitting the form.  If not
                        specified, it will default to the current URI.</td>
                    </tr>
                    <tr>
                        <td valign="top">$target (optional)</td>
                        <td>HTML target for the form.</td>
                    </tr>
                    <tr>
                        <td valign="top">$attributes (optional)</td>
                        <td>Attributes for the form.</td>
                    </tr>
                </table></p>

                Make sure that all the different form instances you want to use
                all have separate names. If not, the results might not be as you
                expected.

                <br/><br/>

                By default, the form's action - the URI that will be called when 
                the form is submitted - is the same URI that displayed the form 
                in the first place. This may seem strange at first, but it is 
                actually very useful, as we shall see.

            </section>

            <section name="ch06_04" label="Adding form elements">

                <br/>

                Adding form elements is done using the addElement function from
                the YDForm class. Depending on the element you want to add, you
                need to specify a different number of parameters.

                <br/><br/>

                The syntax for the addElement function looks as follows:

                <pre>object HTML_QuickForm::addElement( mixed $element )</pre>

                If $element is a string representing an element type, then this
                method accepts variable number of parameters, their meaning and 
                count depending on element type.

                <br/><br/>

                Parameters starting from second will be passed to the element's 
                constructor, consult the <a target="_blank"
                href="http://pear.php.net/manual/en/package.html.html-quickform.intro-elements.php">docs</a>
                for the appropriate element to find out which parameters to pass.

                <br/><br/>

                You can add as many elements to the form as you like. The YDForm
                class is smart enough to preserve the values of the different
                form elements between requests, so you don't have to worry about
                this. The Yellow Duck Framework takes care of this for you.

                <br/><br/>

                The next section will give you an overview of the different
                element types you can add to the YDForm class.

            </section>

            <section name="ch06_05" label="The different form elements">

                <br/>

                There are a whole number of standard form elements (sometimes
                called widgets) that can be added to a form. Here's an overview
                of the different elements together with the HTML element they
                represent.

                <br/><br/>

                First, let's have a look at the standard HTML elements.

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="20%"><b>Element</b></td>
                        <td width="60%"><b>Description</b></td>
                        <td width="20%"><b>Docs</b></td>
                    </tr>
                    <tr>
                        <td valign="top">button</td>
                        <td>Class for &lt;input type="button" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-button.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">checkbox</td>
                        <td>Class for &lt;input type="checkbox" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-checkbox.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">file</td>
                        <td>Class for &lt;input type="file" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-file.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">hidden</td>
                        <td>Class for &lt;input type="hidden" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-hidden.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">image</td>
                        <td>Class for &lt;input type="image" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-image.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">password</td>
                        <td>Class for &lt;input type="password" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-password.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">radio</td>
                        <td>Class for &lt;input type="radio" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-radio.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">reset</td>
                        <td>Class for &lt;input type="reset" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-reset.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">select</td>
                        <td>Class for &lt;select /&gt; elements.
                        The class allows loading of &lt;option&gt; elements from
                        array or database.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-select.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">submit</td>
                        <td>Class for &lt;input type="submit" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-submit.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">text</td>
                        <td>Class for &lt;input type="text" /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-text.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">textarea</td>
                        <td>Class for &lt;textarea /&gt; elements.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-textarea.php">docs</a></td>
                    </tr>
                </table></p>

                There are also some custom element types. These are generally a
                bit more complex but are able to do things which would otherwise
                require a lot of manual work.

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="20%"><b>Element</b></td>
                        <td width="60%"><b>Description</b></td>
                        <td width="20%"><b>Docs</b></td>
                    </tr>
                    <tr>
                        <td valign="top">advcheckbox</td>
                        <td>Class for an advanced checkbox type field. 
                        Basically this fixes a problem that HTML has had where 
                        checkboxes can only pass a single value (the value of
                        the checkbox when checked).</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-advcheckbox.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">autocomplete</td>
                        <td>Class for a text field with autocompletion 
                        feature. The element looks like a normal HTML input text
                        element that at every keypressed javascript event, 
                        searches the array of options for a match and 
                        autocompletes the text in case of match.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-autocomplete.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">date</td>
                        <td>Class for a group of elements used to input dates 
                        (and times).</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-date.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">group</td>
                        <td>Class for a form element group. QuickForm (and 
                        also YDForm)  allows grouping of several elements into
                        one entity and using this entity as a new element.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-group.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">header</td>
                        <td>Class for adding headers to the form.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-header.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">hiddenselect</td>
                        <td>This class behaves as a select element, but instead 
                        of creating a &lt;select&gt; it creates hidden elements 
                        for all values already selected with setDefaults() or 
                        setConstants().</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-hiddenselect.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">hierselect</td>
                        <td>Class to dynamically create two HTML  &lt;select&gt; 
                        elements. The first select changes the content of the 
                        second select.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-hierselect.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">link</td>
                        <td>Class for a link type field.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-link.php">docs</a></td>
                    </tr>
                    <tr>
                        <td valign="top">static</td>
                        <td>Class for static data.</td>
                        <td valign="top"><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.html-quickform-static.php">docs</a></td>
                    </tr>
                </table></p>

                <i><b>Note</b>: it is possible to make your own widgets as well.
                Please refer to the documentation of the
                <a target="_blank" href="http://pear.php.net/">PEAR</a> project.</i>

            </section>

            <section name="ch06_06" label="Displaying the form">

                <br/>

                For displaying the form, there are several options. The way you
                display the form is largely influenced by how much control you
                want to have over the form rendering and whether you want to use
                the YDTemplate class for templates or not.

                <br/><br/>

                The easiest way of displaying your form is by calling it's
                class function called <code>display</code>. This will render the
                form and display the resulting HTML. This is definitely the
                easiest way of working, but you have very little to almost no
                control on how the form will be displayed.

                <br/><br/>

                If you want to use a template engine, there are two different
                ways of rendering the form. If you still want to stick with the
                default layout, you can use the <code>toHtml</code> class 
                function of the YDForm class to get the HTML representation of
                your form. You can then assign this as a normal template
                variable to the template class. This again is a very quick way
                of working but only gives you limited possibilities to determine
                the exact look and feel of the rendered form.

                <br/><br/>

                If you want full control and you will be using templates (which
                is the advised way of working), you can use the class function
                <code>toArray</code> to get an array representation of your form
                which is very easy to use in your code. Let's take a look at how
                the following form code is converted to an array:

                <pre><font color="#0000FF">&lt;?php</font>

<font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'firstForm'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">setDefaults</font><font color="#000000">(</font><font color="#000033"> array</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'name'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Joe User'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font>
<font color="#000033">    </font><font color="#009F00">'text'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'name'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Enter your name:'</font><font color="#000000">,</font><font color="#000033"> array</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'size'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#CC9900">50</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font>
<font color="#000033">    </font><font color="#009F00">'textarea'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'desc'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Enter the description:'</font>
<font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'submit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'cmdSubmit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Send'</font><font color="#000033"> </font><font color="#000000">);</font><font color="#CC9900">0</font>

<font color="#0000FF">?&gt;</font></pre>

                The code above results in the following array structure:

                <pre>array (
  'frozen' =&gt; false,
  'javascript' =&gt; '',
  'attributes' =&gt; 'action="/form.php" method="post" name="firstForm" id="firstForm"',
  'requirednote' =&gt; '* denotes required field',
  'errors' =&gt; 
  array (
  ),
  'hidden' =&gt; '',
  'name' =&gt; 
  array (
    'name' =&gt; 'name',
    'value' =&gt; 'Joe User',
    'type' =&gt; 'text',
    'frozen' =&gt; false,
    'label' =&gt; 'Enter your name:',
    'required' =&gt; true,
    'error' =&gt; NULL,
    'html' =&gt; '&lt;input size="50" name="name" type="text" value="Joe User" /&gt;',
  ),
  'desc' =&gt; 
  array (
    'name' =&gt; 'desc',
    'value' =&gt; NULL,
    'type' =&gt; 'textarea',
    'frozen' =&gt; false,
    'label' =&gt; 'Enter the description:',
    'required' =&gt; false,
    'error' =&gt; NULL,
    'html' =&gt; '&lt;textarea name="desc"&gt;&lt;/textarea&gt;',
  ),
  'cmdSubmit' =&gt; 
  array (
    'name' =&gt; 'cmdSubmit',
    'value' =&gt; 'Send',
    'type' =&gt; 'submit',
    'frozen' =&gt; false,
    'label' =&gt; '',
    'required' =&gt; false,
    'error' =&gt; NULL,
    'html' =&gt; '&lt;input name="cmdSubmit" value="Send" type="submit" /&gt;',
  ),
)</pre>

                The structure of this array is really easy. Every form array
                always contains a number of standard elements of which only a
                few are important for us right now. Let's go over them:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Element</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">attributes</td>
                        <td>This variable contains the attributes for the actual
                        form HTML tag. It contains parameters such as the 
                        action, method, name and ID of the form.</td>
                    </tr>
                    <tr>
                        <td valign="top">javascript</td>
                        <td>The javascript for the form in case you are using
                        client-side validation (see later on).</td>
                    </tr>
                    <tr>
                        <td valign="top">errors</td>
                        <td>The errors collection is an array which contains a 
                        list of all the errors that were encountered during the
                        validation of the form. We will discuss this in depth 
                        later on.</td>
                    </tr>
                </table></p>

                Then it contains a subarray for each element in the form. Each
                of these subforms have the same structure. Let's have a look at
                the different parameters for each form element:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Element</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">name</td>
                        <td>The name of the form element.</td>
                    </tr>
                    <tr>
                        <td valign="top">value</td>
                        <td>The value of the form element (which is generally 
                        the contents of the form element).</td>
                    </tr>
                    <tr>
                        <td valign="top">type</td>
                        <td>The type of the element.</td>
                    </tr>
                    <tr>
                        <td valign="top">label</td>
                        <td>The label specified for the form element.</td>
                    </tr>
                    <tr>
                        <td valign="top">required</td>
                        <td>Indicating if this is a required form element or
                        or not. This is always a boolean value.</td>
                    </tr>
                    <tr>
                        <td valign="top">error</td>
                        <td>The error message for this form element after
                        validating the form. If not error is attached to the
                        form, this will contain a NULL value.</td>
                    </tr>
                    <tr>
                        <td valign="top">html</td>
                        <td>The HTML representation of the form element.</td>
                    </tr>
                </table></p>

                Instead of first having to convert the form object to an array
                for assigning it to the template, there is a shortcut function
                called <code>addForm</code> in the YDTemplate class which
                automatically converts the form object to an array and assigns
                it to the template object.

                <br/><br/>

                By using the elements of this array in the template, you can
                pretty much layout the field exactly as you wish. It looks like
                a lot of work, but it's a lot easier than handcoding every
                single part of the form.

            </section>

            <section name="ch06_07" label="Validating forms">

                <br/>

                The concept of validating forms is to evaluate the input of the
                form and checking to see if it matches the specified rules. A
                form is considered to be validated when the URI called to
                display it has one or more parameters (either GET or POST
                according to the method used by the form), and all the rules
                (which we will discuss in a second) have been satisfied.

                <br/><br/>

                For validating forms, we will use three specific functions of 
                the YDForm class. We are going to use:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Function</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">applyFilter</td>
                        <td>We will use this function to massage the data of the
                        form before validating it. We can use this function to 
                        e.g. convert a field value to uppercase or we can use it 
                        to remove leading and trailing spaces from the actual 
                        value.</td>
                    </tr>
                    <tr>
                        <td valign="top">addRule</td>
                        <td>This function attaches a rule to a specific form 
                        element and also defines the error message that needs to 
                        be shown if this rule is not honoured.</td>
                    </tr>
                    <tr>
                        <td valign="top">validate</td>
                        <td>This function will check the input of the form 
                        against all rules after applying the specified filters, 
                        and will return either true or false to indicate if the
                        form was valid or not.</td>
                    </tr>
                </table></p>

                The <code>applyFilter</code> function takes two arguments. The
                first argument is either the name of an element or the string
                "__ALL__", meaning that this filter applies to all elements on
                the form. The second argument is either a function, 
                user-defined or built-in function.

                <br/><br/>

                There are two ways of having the rules checked an applied. You
                can choose between server side and client side evaluation of the
                rules. By default, the rule are server side evaluated. By
                changing the way you call the addRule function, you can change
                the rule to client side evaluation. The following code sample
                illustrates adding a client side rule:

                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'txt1'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'name required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">''</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'client'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                If you omit the parameter called <code><font color="#009F00">'client'</font></code>,
                the rule will be a server side evaluated rule again. Be aware
                that client side evaluation is not as clear as server side
                evaluation and is less secure. Since the client side evaluation
                is based on JavaScript, it's easy to get around the validation
                by disabling JavaScript in your browser. The only advantage the
                client side evaluation has is that it saves you the roundtrip to
                the server.

                <br/><br/>

                Up till now, we only discussed one specific rule, namely the
                <code>required</code> rule. There are of course a lot more
                rules which you can use. Here's a list:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Rule</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">required</td>
                        <td>value is not empty</td>
                    </tr>
                    <tr>
                        <td valign="top">maxlength</td>
                        <td>value must not exceed n characters</td>
                    </tr>
                    <tr>
                        <td valign="top">minlength</td>
                        <td>value must have more than n characters</td>
                    </tr>
                    <tr>
                        <td valign="top">rangelength</td>
                        <td>value must have between m and n characters</td>
                    </tr>
                    <tr>
                        <td valign="top">regex</td>
                        <td>value must pass the regular expression</td>
                    </tr>
                    <tr>
                        <td valign="top">email</td>
                        <td>value is a correctly formatted email</td>
                    </tr>
                    <tr>
                        <td valign="top">lettersonly</td>
                        <td>value must contain only letters</td>
                    </tr>
                    <tr>
                        <td valign="top">alphanumeric</td>
                        <td>value must contain only letters and numbers</td>
                    </tr>
                    <tr>
                        <td valign="top">numeric</td>
                        <td>value must be a number</td>
                    </tr>
                    <tr>
                        <td valign="top">nopunctuation</td>
                        <td>value must not contain punctuation characters</td>
                    </tr>
                    <tr>
                        <td valign="top">nonzero</td>
                        <td>value must be a number not starting with 0</td>
                    </tr>
                    <tr>
                        <td valign="top">callback</td>
                        <td>This rule allows to use an external function/method 
                        for validation, either by registering it or by passing 
                        a callback as a format parameter.</td>
                    </tr>
                    <tr>
                        <td valign="top">compare</td>
                        <td>The rule allows to compare the values of two form 
                        fields. This can be used for e.g. 'Password repeat must 
                        match password' kind of rule.</td>
                    </tr>
                </table></p>

                There are also some rules that apply specifically to file
                uploads:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Rule</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">uploadedfile</td>
                        <td>Required file upload</td>
                    </tr>
                    <tr>
                        <td valign="top">maxfilesize</td>
                        <td>The file size must not exceed the given number of
                        bytes</td>
                    </tr>
                    <tr>
                        <td valign="top">mimetype</td>
                        <td>The file must have a correct mimetype</td>
                    </tr>
                    <tr>
                        <td valign="top">filename</td>
                        <td>The filename must match the given regex</td>
                    </tr>
                </table></p>

                <i><b>Note</b>: Some rules (for example the rangelength rule)
                take an additional argument indicating the length. Please refer
                to the <a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.intro-validation.php">PEAR</a> documentation for an explanation of each rule.</i>

                <br/><br/>

                Now that we assigned all the rules and filters to the form, we 
                can use the <code>validate</code> function to check if the
                input from our form was validated succesfully. Only if this
                condition is met, we will do something with the data of the
                form. This is also called "processing the form" which is
                discussed in the next section.

            </section>

            <section name="ch06_08" label="Processing forms">

                <br/>

                For the actual processing of the forms, there are only two
                functions you will really use a lot. This is the class function
                <code>exportValue</code> from the YDForm class and it's
                companion function called <code>exportValues</code>.

                <br/><br/>

                The <code>exportValue</code> function will export the value of a
                named form element. Remember that this function will export the
                cleaned-up value of the form element. This means that the return
                value of this function will also have all the possible form
                filters applied before it's returned.

                <br/><br/>
                
                The <code>exportValues</code> will do the same as the
                <code>exportValue</code> function but will return the values for
                all the elements in the form. Unfortunately, this function does
                not work with file uploads. Again, the values returned by this 
                function will also have all the necessary filters applied to 
                them.

            </section>

            <section name="ch06_09" label="More information">

                <br/>

                For more information about using the HTML_QuickForm package from
                the PEAR project, you can visit the following websites:

                <div><ul>
                    <li><a target="_blank" href="http://www.thelinuxconsultancy.co.uk/quickform.html">http://www.thelinuxconsultancy.co.uk/quickform.html</a></li>
                    <li><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.php">http://pear.php.net/manual/en/package.html.html-quickform.php</a></li>
                </ul></div>

                The YDForm class is an extension of the HTML_QuickForm package
                and provides all the functionality and more.

                <page-break />

            </section>

        <section name="ch07" label="Accessing database contents" />

            <section name="ch07_01" label="Introduction">

                <br/>

                The standard functions in PHP do not provide a straightforward
                way of interfacing with database contents. Each database type
                has it's own specific set of functions to query the database and
                get to it's contents. This is not necessarily a problem if you
                stick to one database engine, but if you ever need to switch to
                a different database backend, or even worse, if you want to
                combine different database backends in the same web application,
                you are facing a big problem.

                <br/><br/>

                In the Yellow Duck Framework, we have built a wrapper around the
                PEAR::DB classes, which provide a standardized way of connecting
                to different database backends. In the background, it makes sure
                that the right native PHP database functions are called and also
                make sure the data from each database engine is returned in a
                standardized way. As such, there is no difference anymore in
                connecting to a MySQL, SQLite, Oracle or SQL Server database.
                
                <br/><br/>

                In the Yellow Duck Framework database classes, we also provide
                you with an easy way to safely put variables in SQL statements.
                There is no need anymore to manually escape all the different
                variables. By using some small tricks, this is all being taken
                care of for you, transparantly.

            </section>

            <section name="ch07_02" label="Supported database engines">

                <br/>

                In the Yellow Duck Framework version 2.0.0, there is support for
                the following database engines (and versions):

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Short name</b></td>
                        <td width="75%"><b>Full name and version</b></td>
                    </tr>
                    <tr>
                        <td valign="top">dbase</td>
                        <td>dBase</td>
                    </tr>
                    <tr>
                        <td valign="top">fbsql</td>
                        <td>FrontBase</td>
                    </tr>
                    <tr>
                        <td valign="top">ibase</td>
                        <td>InterBase</td>
                    </tr>
                    <tr>
                        <td valign="top">ifx</td>
                        <td>Informix</td>
                    </tr>
                    <tr>
                        <td valign="top">msql</td>
                        <td>Mini SQL</td>
                    </tr>
                    <tr>
                        <td valign="top">mssql</td>
                        <td>Microsoft SQL Server</td>
                    </tr>
                    <tr>
                        <td valign="top">mysql</td>
                        <td>MySQL (for MySQL &lt;= 4.0)</td>
                    </tr>
                    <tr>
                        <td valign="top">mysqli</td>
                        <td>MySQL MySQL (for MySQL &gt;= 4.1)</td>
                    </tr>
                    <tr>
                        <td valign="top">oci8</td>
                        <td>Oracle 7/8/9</td>
                    </tr>
                    <tr>
                        <td valign="top">odbc</td>
                        <td>ODBC (Open Database Connectivity)</td>
                    </tr>
                    <tr>
                        <td valign="top">pgsql</td>
                        <td>PostgreSQL</td>
                    </tr>
                    <tr>
                        <td valign="top">sqlite</td>
                        <td>SQLite</td>
                    </tr>
                    <tr>
                        <td valign="top">sybase</td>
                        <td>SyBase</td>
                    </tr>
                </table></p>

                Depending on the database type you use, not all features may be
                supported. 

                <i><b>Note</b>: For some database types, you will need some
                specific PHP configuration. For some database types, you will
                also have to install additional software on the webserver to  
                enable communication with that database engine. Please refer to
                the <a target="_blank" href="http://www.php.net/manual/en/">PHP
                Online Manual</a> for more information about the database engine
                you want to use with the Yellow Duck Framework.</i>

            </section>

            <section name="ch07_03" label="DSN - Data Source Names">

                <br/>

                The data sources (also called database connection strings or 
                DSN) are specified in an URL-like syntax. Each DSN supports the
                following options:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Option</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">phptype</td>
                        <td>Database backend used in PHP (i.e. mysql , odbc 
                        etc.)</td>
                    </tr>
                    <tr>
                        <td valign="top">dbsyntax</td>
                        <td>Database used with regards to SQL syntax etc. When
                        using ODBC as the phptype, set this to the DBMS type the
                        ODBC driver is connecting to. Examples: access, db2, 
                        mssql, navision, solid, etc.</td>
                    </tr>
                    <tr>
                        <td valign="top">protocol</td>
                        <td>Communication protocol to use ( i.e. tcp, unix 
                        etc.)</td>
                    </tr>
                    <tr>
                        <td valign="top">hostspec</td>
                        <td>Host specification (hostname[:port])</td>
                    </tr>
                    <tr>
                        <td valign="top">database</td>
                        <td>Database to use on the DBMS server</td>
                    </tr>
                    <tr>
                        <td valign="top">username</td>
                        <td>User name for login</td>
                    </tr>
                    <tr>
                        <td valign="top">password</td>
                        <td>Password for login</td>
                    </tr>
                    <tr>
                        <td valign="top">proto_opts</td>
                        <td>Maybe used with protocol</td>
                    </tr>
                    <tr>
                        <td valign="top">option</td>
                        <td>Additional connection options in URI query string 
                        format. Options get separated by &#38;.</td>
                    </tr>
                </table></p>

                The format of the supplied DSN is in its fullest form:

                <pre>phptype(dbsyntax)://username:password@protocol+hostspec/database?option=value</pre>

                Most variations are allowed:
                
                <pre>phptype://username:password@protocol+hostspec:110//usr/db_file.db
phptype://username:password@hostspec/database
phptype://username:password@hostspec
phptype://username@hostspec
phptype://hostspec/database
phptype://hostspec
phptype:///database
phptype:///database?option=value&#38;anotheroption=anothervalue
phptype(dbsyntax)
phptype</pre>

                There is also an alternative syntax you can use:

                <pre>phptype(syntax)://user:pass@protocol(proto_opts)/database</pre>

                If your username or password contain characters used to 
                delineate DSN parts, you can escape them via URI hex encodings:
                
                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Character</b></td>
                        <td width="75%"><b>Hex encoding</b></td>
                    </tr>
                    <tr>
                        <td>:</td>
                        <td>%3a</td>
                    </tr>
                    <tr>
                        <td>/</td>
                        <td>%2f</td>
                    </tr>
                    <tr>
                        <td>@</td>
                        <td>%40</td>
                    </tr>
                    <tr>
                        <td>+</td>
                        <td>%2b</td>
                    </tr>
                    <tr>
                        <td>(</td>
                        <td>%28</td>
                    </tr>
                    <tr>
                        <td>)</td>
                        <td>%29</td>
                    </tr>
                    <tr>
                        <td>?</td>
                        <td>%3f</td>
                    </tr>
                    <tr>
                        <td>=</td>
                        <td>%3d</td>
                    </tr>
                    <tr>
                        <td>&#38;</td>
                        <td>%26</td>
                    </tr>
                </table></p>

                Let's have a look at some samples:

                <br/><br/>

                Connect to database through a socket
                <pre>mysql://user@unix(/path/to/socket)/pear</pre>

                Connect to database on a non standard port
                <pre>pgsql://user:pass@tcp(localhost:5555)/pear</pre>

                Connect to SQLite on a Unix machine using options
                <pre>sqlite:////full/unix/path/to/file.db?mode=0666</pre>

                Connect to SQLite on a Windows machine using options
                <pre>sqlite:///c:/full/windows/path/to/file.db?mode=0666</pre>

                Connect to MySQLi using SSL
                <pre>mysqli://user:pass@localhost/pear?key=client-key.pem&#38;cert=client-cert.pem</pre>

                Connecting to MS Access sometimes requires admin as the user name
                <pre>odbc(access)://admin@/datasourcename</pre>

                <i><b>Note</b>: The extra options which can be specified depends
                on the chosen database engine. Please refer to the documentation
                for your database engine for more information about which
                options can be specified.</i>

            </section>

            <section name="ch07_04" label="The YDDatabase and YDSql classes">

                <br/>

                There are two classes in the Yellow Duck Framework that enable
                you to interact with a database. They do the same, but they look
                at the database from a different point of view.

                <br/><br/>

                The YDDatabase class allows you to connect to a database and
                execute queries on the database. An instance of this class is
                always linked to a specified DSN. Once you instantiated the
                object, you cannot change the DSN anymore.

                <br/><br/>

                The YDSqlQuery is an abstract class around an SQL statement.
                The big difference with the YDDatabase class is that the DSN
                in this case is only specified at time of execution of the
                query. This gives you the opportunity to decide at the very last
                moment which data source is going to execute this query.

                <br/><br/>

                Most people will use the YDDatabase class to connect to a
                database. For the YDDatabase class, the url to the database is
                specified when instantiating the YDDatabase class. An example:

                <pre><font color="#00007F">$db</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDDatabase</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'mysql://root:@localhost/test'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                At this point, the actual database connection is not made yet.
                It's only when a query is performed that a database connection
                is physically made. The framework also provides you a way of
                remembering if a connection is made already and will try to
                reuse that connection if possible.

                <br/><br/>

                <i><b>Note</b>: By default, no persistent database connections
                are made, as not all database engines support them by default. 
                Unless you have specific requirements, we suggest you to not use
                persistent database connections as they are not always 
                reliable.</i>

                <br/><br/>

                Working with the YDSql class is a little different. When you
                instantiate a YDSqlQuery class, you need to pass the SQL query
                to the class constructor. This is illustrated with the following
                code sample

                <pre><font color="#00007F">$db</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDSqlQuery</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'select * from test;'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Choosing between using the YDDatabase and YDSqlQuery classes is
                generally very easy. Most of the time, the YDDatabase class will
                do just fine for you. Just in case you need to be able to send
                the same query to different database backends, you should have a
                look at using the YDSqlQuery class instead.

            </section>

            <section name="ch07_05" label="Specifying variables in SQL queries">

                <br/>

                A problem faced by a lot of web developers is how to encode
                variables properly so that they can safely be included in an
                SQL statement. PHP provides standard functions for the different
                database engines to do this, but this requires a lot of manual
                work and is pretty error-prone.

                <br/><br/>

                In the Yellow Duck Framework, this is done in a totally
                different way. By using placeholders in the SQL statement and
                passing the variables for the SQL statement as an array, the
                framework will encode the variables properly for you according
                to the database engine and make sure every single one of them is
                properly escaped.

                <br/><br/>

                Let's have a look at a small example. Have a look at the 
                following SQL statement, which is properly escaped:

                <pre>SELECT * FROM test WHERE user = 'pieter' and title = 'A lot of hello''s';</pre>

                We can now rewrite the query as follows:

                <pre>SELECT * FROM test WHERE user = ? and title = ?;</pre>

                If we then pass the two variables as an array:

                <pre>array( "pieter", "A lot of hello's" )</pre>

                The framework will know how to properly escape the different
                parameters in the SQL query. The framework can handle different
                types of placeholders (a.k.a. wildcards). Here is a list of the
                placeholders that are supported:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Placeholder</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">?</td>
                        <td>(recommended) stands for a scalar value like strings 
                        or numbers, the value will be quoted depending of the 
                        database</td>
                    </tr>
                    <tr>
                        <td valign="top">!</td>
                        <td>stands for a scalar value and will inserted into the 
                        statement "as is".</td>
                    </tr>
                    <tr>
                        <td valign="top">&#38;</td>
                        <td>requires an existing filename, the content of this
                        file will be included into the statement (i.e. for 
                        saving binary data of a graphic file in a database)</td>
                    </tr>
                </table></p>

                <i><b>Note</b>: you can still escape the variables yourself and
                just pass the SQL statement with an empty array of variables to
                the framework. However, we strongly suggest you to use the
                placeholders as you code will be a lot more flexible and 
                reliable. It's also a lot less work to use the placeholders.</i>

            </section>

            <section name="ch07_06" label="Getting and sending data to a data source">

                <br/>

                Both the YDDatabase and YDSqlQuery classes support the same
                methods of actually querying the database and retrieving the
                information from the database. There is however a slight
                difference in the way you need to make the function call for the
                YDSqlQuery class in comparison to the way you make the function
                call for the YDDatabase class.

                <br/><br/>

                Let's have a look at the different methods and describe their
                functionality.

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Function</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top"><code>executeQuery</code></td>
                        <td>This function will execute the query and will return
                        the number of affected rows. Use this for insert, update
                        and delete statements.</td>
                    </tr>
                    <tr>
                        <td valign="top"><code>executeSelect</code></td>
                        <td>This function will retrieve all the rows matching 
                        the query as an associative array. This will return 0
                        or more rows.</td>
                    </tr>
                    <tr>
                        <td valign="top"><code>executeSelectRow</code></td>
                        <td>This function will do the same of the executeSelect
                        query, but will only return the first row if there is
                        one.</td>
                    </tr>
                </table></p>

                If you use these functions together with the YDDatabase class,
                the arguments you need to pass to the function call are always
                the same. Here are the arguments you need to specify:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Argument</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">$query</td>
                        <td>The SQL query or the statement to execute.</td>
                    </tr>
                    <tr>
                        <td valign="top">$params</td>
                        <td>Array, string or numeric data to be added to the 
                        prepared statement. Quantity of items passed must match 
                        quantity of placeholders in the prepared statement:
                        meaning 1 placeholder for non-array parameters or 1 
                        placeholder per array element.</td>
                    </tr>
                </table></p>

                Using these function calls with the YDSqlQuery class is pretty
                much the same, but the arguments are a little different:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Argument</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">$url</td>
                        <td>The database url for this query.</td>
                    </tr>
                    <tr>
                        <td valign="top">$params</td>
                        <td>Array, string or numeric data to be added to the 
                        prepared statement. Quantity of items passed must match 
                        quantity of placeholders in the prepared statement:
                        meaning 1 placeholder for non-array parameters or 1 
                        placeholder per array element.</td>
                    </tr>
                </table></p>

                There is one function for both the YDDatabase and YDSqlQuery
                classes which is just a little different. The 
                <code>executeSelectLimit</code> takes 4 instead of two arguments
                (for both classes). The additional two parameters you need to
                specify are the row from which to start fetching from and the
                number of rows you want to have returned. Please refer to the
                API documentation for the full details on how to call this
                function.

                <page-break />

            </section>

        <section name="ch08" label="How to handle authentication" />

            <section name="ch08_01" label="Overview">
                <br/>
                Not written yet
            </section>

            <section name="ch08_02" label="Example 1 - IP based authentication">
                <br/>
                Not written yet
            </section>

            <section name="ch08_03" label="Example 2 - Basic HTTP authentication">
                <br/>
                Not written yet
            </section>

            <section name="ch08_04" label="Example 3 - Form based authentication">
                <br/>
                Not written yet
                <page-break />
            </section>

        <section name="ch09" label="Using files, images and directories" />

            <section name="ch09_01" label="Introduction?">
                <br/>
                Not written yet
            </section>

            <section name="ch09_02" label="Why this abstraction?">
                <br/>
                Not written yet
            </section>

            <section name="ch09_03" label="Using files">
                <br/>
                Not written yet
            </section>

            <section name="ch09_04" label="Using images">
                <br/>
                Not written yet
            </section>

            <section name="ch09_05" label="Using directories">
                <br/>
                Not written yet
                <page-break />
            </section>

        <section name="ch10" label="Using URLs and downloading data" />

            <section name="ch10_01" label="Introduction">
                <br/>
                Not written yet
            </section>

            <section name="ch10_02" label="Raw HTTP connections">
                <br/>
                Not written yet
            </section>

            <section name="ch10_03" label="The YDUrl class">
                <br/>
                Not written yet
            </section>

            <section name="ch10_04" label="Caching of downloaded data">
                <br/>
                Not written yet
                <page-break />
            </section>

        <section name="ch11" label="Using XML/RPC clients and servers" />

            <section name="ch11_01" label="What is XML/RPC?">

                <br/>

                It's a spec and a set of implementations that allow software 
                running on disparate operating systems, running in different 
                environments to make procedure calls over the Internet.

                <br/><br/>

                It's remote procedure calling using HTTP as the transport and 
                XML as the encoding. XML-RPC is designed to be as simple as
                possible, while allowing complex data structures to be 
                transmitted, processed and returned.

                <br/><br/>

                To invoke an XML/RPC call, an XML/RPC client might send the
                following XML data to a server:

                <pre><font color="#800080">&lt;?</font><font color="#000080">xml</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"1.0"</font><font color="#800080">?&gt;</font>
<font color="#000080">&lt;methodCall&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;methodName&gt;</font><font color="#000000">tide.getTideForDay</font><font color="#000080">&lt;/methodName&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;params&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;param&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;value&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;string&gt;</font><font color="#000000">2004-05-11</font><font color="#000080">&lt;/string&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;/value&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/param&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/params&gt;</font>
<font color="#000080">&lt;/methodCall&gt;</font></pre>

                This server will then interpret the XML, execute the right
                function and send back the following XML data:

                <pre><font color="#800080">&lt;?</font><font color="#000080">xml</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"1.0"</font><font color="#800080">?&gt;</font>
<font color="#000080">&lt;methodResponse&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;params&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;param&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;value&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;struct&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;member&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;name&gt;</font><font color="#000000">tideDate</font><font color="#000080">&lt;/name&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;value&gt;</font>
<font color="#000000">                            </font><font color="#000080">&lt;string&gt;</font><font color="#000000">2004-05-11</font><font color="#000080">&lt;/string&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;/value&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;/member&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;member&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;name&gt;</font><font color="#000000">tideDay</font><font color="#000080">&lt;/name&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;value&gt;</font>
<font color="#000000">                            </font><font color="#000080">&lt;string&gt;</font><font color="#000000">di</font><font color="#000080">&lt;/string&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;/value&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;/member&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;member&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;name&gt;</font><font color="#000000">tideLow1</font><font color="#000080">&lt;/name&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;value&gt;</font>
<font color="#000000">                            </font><font color="#000080">&lt;string&gt;</font><font color="#000000">01:07:00</font><font color="#000080">&lt;/string&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;/value&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;/member&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;member&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;name&gt;</font><font color="#000000">tideLow2</font><font color="#000080">&lt;/name&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;value&gt;</font>
<font color="#000000">                            </font><font color="#000080">&lt;string&gt;</font><font color="#000000">13:39:00</font><font color="#000080">&lt;/string&gt;</font>
<font color="#000000">                        </font><font color="#000080">&lt;/value&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;/member&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;/struct&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;/value&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/param&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/params&gt;</font>
<font color="#000080">&lt;/methodResponse&gt;</font></pre>

                The XML/RPC client will interpret this XML response and will
                convert it back to objects and variables in the native
                programming language.

                <br/><br/>

                The beauty of XML/RPC is that it's really easy to use and still
                high performant if implemented correctly. The client and the
                server can be speaking two totally different programming
                languages and still are able to exchange data between the two
                with preserving the native data types.

                <br/><br/>

                The Yellow Duck Framework has classes for creating both XML/RPC
                clients and servers. Both use the very latest technology and
                are one of the few implementations that support GZip compression
                for the HTTP data streams, resulting in better performance.

                <br/><br/>

                The YDXmlRpcClient class implements an XML/RPC client while the
                YDXmlRpcServer class implements a full XML/RPC server which
                supports introspection so that the client can easily determine
                what functions are supported by the server.

                <br/><br/>

                Let's have a look at how these classes can be used to perform
                XML/RPC based communication.

            </section>

            <section name="ch11_02" label="Using YDXmlRpcClient">

                <br/>

                To create an XML/RPC client, we will use the YDXmlRpcClient
                class which does all the work for us. When you instantiate this
                class, you need to specify the URL of the XML/RPC server.

                <br/><br/>

                Once you made an instance of the XML/RPC client, you can
                execute functions on that server by using it's
                <code>execute</code> function. This function takes two arguments
                which is the name of the XML/RPC method and an optional array
                with parameters.

                <br/><br/>

                The request will then be executed and the result will be
                returned as real PHP values and objects.

                <br/><br/>

                Let's have a look at the following code sample:

                <pre><font color="#00007F">$client</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDXmlRpcClient</font><font color="#000000">(</font><font color="#000033"> </font>
<font color="#000033">    </font><font color="#009F00">'http://www.grijzeblubber.be/bba/xmlrpc.php'</font><font color="#000033"> </font>
<font color="#000000">);</font><font color="#000033"> </font>

<font color="#00007F">$result</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$client</font><font color="#000000">-&gt;</font><font color="#000033">execute</font><font color="#000000">(</font><font color="#000033"> </font>
<font color="#000033">    </font><font color="#009F00">'tide.getTideForDay'</font><font color="#000000">,</font><font color="#000033"> array</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'2004-05-11'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font>
<font color="#000000">);</font><font color="#000033"> </font></pre>

                In this example, we first connect to the XML/RPC server using
                the specified URL. Then we execute the 'tide.getTideForDay'
                function on that server which returns an array.
                
                <br/><br/>
                
                We had to specify a string with the date. After executing this,
                the variable $result will have the following contents:

                <pre>array (
  'tideDate' => '2004-05-11',
  'tideDay' => 'di',
  'tideLow1' => '01:07:00',
  'tideLow2' => '13:39:00',
)</pre>

                If something went wrong or the XML/RPC server returned an error,
                a fatal error will be raised with the right error message. The
                error message will be the same as the error message returned by
                the XML/RPC server.
                
                <br/><br/>
                
                What you can not see in this example is that if the XML/RPC
                server supports GZip compression, this will be used to do the
                communication. This not only saves bandwidth but also improves
                the performance of the XML/RPC calls quite a lot. Since a new
                HTTP request has to be made for each XML/RPC call, reducing the
                total size of information send over the network can really
                improve the performance and scalability of your XML/RPC based
                services.

            </section>

            <section name="ch11_03" label="Using YDXmlRpcServer">
                <br/>
                Not written yet
            </section>

            <section name="ch11_04" label="More information">

                <br/>

                More information on XML/RPC can be found on the
                <a target="_blank" href="http://www.xmlrpc.com/">official
                XML/RPC website</a>.

                <page-break />

            </section>

        <section name="ch12" label="Sending emails" />

            <section name="ch12_01" label="Introduction">

                <br/>
                
                In the Yellow Duck Framework, we provided a special class to
                easily send emails with all the possible options. It is possible
                with the framework to create emails that have both text and
                HTML contents, inline images are supported for HTML emails and
                also file attachments are fully supported.

                <br/><br/>

                The Yellow Duck Framework supports the following options for
                sending emails:

                <div><ul>
                    <li>Specifying the from address</li>    
                    <li>Specifying the reply-to address</li>    
                    <li>Specifying one or more to addresses</li>    
                    <li>Specifying one or more cc addresses</li>    
                    <li>Specifying one or more bcc addresses</li>    
                    <li>Specifying the plain text version of the email</li>    
                    <li>Specifying the HTML version of the email</li>    
                    <li>File attachments</li>    
                    <li>Inline HTML images</li>    
                </ul></div>
                
                <i><b>Note</b>: The emails outputted with the Yellow Duck 
                Framework have been tested with a variety of email clients and 
                servers to make sure they were all correctly supported.</i>

            </section>

            <section name="ch12_02" label="The YDEmail class">

                <br/>

                The class YDEmail in the Yellow Duck Framework is the class that
                defines an email. You can use the different class methods to set
                the recipients, subject, contents and so on for your email.

                <br/><br/>

                Once the email object is set up, you can use the function
                <code>send</code> to send the actual email to the correct
                recipients. This function takes no arguments and is smart enough
                to figure out the list of recipients to send the email to.

                <br/><br/>

                Before sending the email, a number of conditions is checked 
                which would prevent the email from being send properly. An error
                will be raised if you forgot to specify at least one recipient
                for your email. You will also be forced to specify the sender
                from the email.

                <br/><br/>

                <i><b>Note</b>: For the sending of the emails, the internal 
                <code>mail</code> function is used to do the hard work. 
                Depending on your computer platform, this might requires some 
                setup. Please refer to the <a target="_blank" 
                href="http://www.php.net/mail/">PHP Online Documentation</a> for
                instructions on how to set this up.</i>

                <br/><br/>

                <i><b>Note</b>: If you specify HTML text as the text only 
                contents of your email, all HTML tags will be stripped from the
                text. We cannot guarantee that the layout of the text will be
                properly preserved.</i>

            </section>

            <section name="ch12_03" label="An example">

                <br/>
                
                The following sample demonstrates you how you can setup a
                YDEmail object, fill it and send it to the specified recipients.

                <pre><font color="#666666">// Send the email</font>
<font color="#00007F">$eml</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDEmail</font><font color="#000000">();</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setFrom</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'pieter@yellowduck.be'</font><font color="#000000">,</font><font color="#000033"> YD_FW_NAME </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">addTo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'pieter@yellowduck.be'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setSubject</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'Hello from Pieter &amp; Fiona!'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setTxtBody</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$body</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setHtmlBody</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$body</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">addAttachment</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'email1.tpl'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">addHtmlImage</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'fsimage1.jpg'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'image/jpeg'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">send</font><font color="#000000">();</font></pre>

                In this code sample, we first created a new instance of the
                YDEmail class to represent our email message.

                <br/><br/>
                
                After that, we set the correct from address. This is normally 
                your own email address, and unless otherwise specified, it will
                be used as the address to reply to. Always make this a valid and
                existing address unless you do not want people to reply to your
                email.

                <br/><br/>

                Then we added a recipient using the <code>addTo</code> function.
                In this example, we only specified the email address. You can
                optionally specify a name as well which will be the name shown
                in the email client.

                <br/><br/>

                Then we defined the subject for the email. Remember that the
                subject of an email is not supposed to contain HTML data. If you
                happened to have HTML in there, the framework will automatically
                remove the HTML tags.

                <br/><br/>

                The following two lines specify the plain text and HTML body of
                our email message. You don't have to specify both. If you
                included HTML tags in the plain text version of your email, the
                HTML tags will be automatically removed.

                <br/><br/>

                Using the <code>addAttachment</code> function, we added a file
                attachment to the email. The only argument we specified was the
                path to the file we want to attach.

                <br/><br/>

                Then we used the <code>addHtmlImage</code> function to add an
                image which we can use as an inline image in the HTML version of
                our email. We specified both the path of the image as well as
                the image MIME type.

                <br/><br/>

                Then we invoked the <code>send</code> function to actually send
                the email to the different recipients.

                <br/><br/>

                <i><b>Note</b>: as with every class in the Yellow Duck Framework
                you want to use, make sure you included the class definition
                file.</i>

            </section>

            <section name="ch12_04" label="Combining YDTemplate and YDEmail">

                <br/>
                
                To make it easier to construct the contents of your email, you
                can combine the YDTemplate class with the YDEmail class to 
                create email messages based on templates.

                <br/><br/>

                The way this works is by first creating a YDTemplate instance
                which will be used to create the body of your email. After you
                setup the YDTemplate instance, you can use the 
                <code>getOutput</code> function to get the parsed result of your
                template object. You will probably have to specify the name of a
                template as you will probably use a different template than the
                one from your script.

                <br/><br/>

                After you got the body of your email, you can assign this to the
                YDEmail class using the functions <code>setTxtBody</code> and 
                <code>setHtmlBody</code>. The following example demonstrates
                this concept:

                <pre><font color="#666666">// Parse the template for the email</font>
<font color="#00007F">$emlTpl</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDTemplate</font><font color="#000000">();</font>
<font color="#00007F">$emlTpl</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'email'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'email'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$body</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$emlTpl</font><font color="#000000">-&gt;</font><font color="#000033">getOutput</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'email1_template'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Send the email</font>
<font color="#00007F">$eml</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDEmail</font><font color="#000000">();</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setFrom</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'pieter@yellowduck.be'</font><font color="#000000">,</font><font color="#000033"> YD_FW_NAME </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">addTo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'email'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setSubject</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'Hello from Pieter &amp; Fiona!'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setTxtBody</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$body</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">setHtmlBody</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$body</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">addAttachment</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'email1.tpl'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">addHtmlImage</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'fsimage1.jpg'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'image/jpeg'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$eml</font><font color="#000000">-&gt;</font><font color="#000033">send</font><font color="#000000">();</font></pre>

                The template for this email will look like:

                <pre><font color="#000080">&lt;html&gt;</font>

<font color="#000080">&lt;head&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_FW_NAMEVERS</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000080">&lt;/head&gt;</font>

<font color="#000080">&lt;body&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;p&gt;</font><font color="#000000">Hello from Pieter </font><font color="#FF0000">&amp; </font><font color="#000000">Fiona</font><font color="#000080">&lt;/p&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;p&gt;&lt;img</font><font color="#800080"> </font><font color="#008080">src</font><font color="#800080">=</font><font color="#7F007F">"fsimage1.jpg"</font><font color="#800080"> </font><font color="#008080">border</font><font color="#800080">=</font><font color="#7F007F">"1"</font><font color="#800080"> </font><font color="#008080">alt</font><font color="#800080">=</font><font color="#7F007F">"Pieter &amp; Fiona"</font>
<font color="#800080">    </font><font color="#008080">width</font><font color="#800080">=</font><font color="#7F007F">"320"</font><font color="#800080"> </font><font color="#008080">height</font><font color="#800080">=</font><font color="#7F007F">"213"</font><font color="#000080">&gt;&lt;/p&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;p&gt;</font><font color="#000000">This email was sent to </font>
<font color="#000000">    </font><font color="#000080">&lt;a</font><font color="#800080"> </font><font color="#008080">href</font><font color="#800080">=</font><font color="#7F007F">"mailto:</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$email</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">"</font><font color="#000080">&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$email</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/a&gt;</font><font color="#000000">.</font><font color="#000080">&lt;/p&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;p&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_FW_NAMEVERS</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/p&gt;</font>

<font color="#000080">&lt;/body&gt;</font>

<font color="#000080">&lt;/html&gt;</font>
<font color="#000000"></font></pre>

                <i><b>Note</b>: if you look carefully at the example above, you
                will see that we referenced the image in the template by it's
                name given when you added the file to the YDEmail object. This
                src attribute should only contain the name of the image, and not
                a local path. An internet url is supported as well.</i>

                <page-break />

            </section>

        <section name="ch13" label="Creating RSS and ATOM feeds" />

            <section name="ch13_01" label="What is RSS and ATOM?">
                
                <br/>

                RSS and ATOM are XML-based file formats intended to allow lists 
                of information, known as "feeds", to be synchronised between 
                publishers and consumers. Feeds are composed of a number of 
                items, known as "entries", each with an extensible set of 
                attached metadata. For example, each entry has a title.

                <br/><br/>

                The primary use case that Atom and RSS address is for 
                syndicating Web content such as Weblogs and news headlines to 
                other Web sites and directly to consumers. However, nothing 
                precludes it from being used for other purposes and types of 
                content.

                <br/><br/>

                RSS is the oldest of the two, and has undergone different
                revisisions. Currently, there are 3 major versions of RSS, which
                is version 0.91, version 1.0 and version 2.0. RSS 1.0 is also
                referenced as RDF Site Summary. Let's have a look at the XML 
                contents for each one of them:

                <br/><br/>

                This is an example of an RSS 0.91 XML file:

                <pre><font color="#800080">&lt;?</font><font color="#000080">xml</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"1.0"</font><font color="#800080"> </font><font color="#008080">encoding</font><font color="#800080">=</font><font color="#7F007F">"ISO-8859-1"</font><font color="#800080">?&gt;</font>
<font color="#000080">&lt;rss</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"0.91"</font><font color="#000080">&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;channel&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Yellow Duck Framework</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;description&gt;</font><font color="#000000">News about the Yellow Duck Framework</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss091</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;item&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 1</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss091#1</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;description&gt;</font><font color="#000000">Description 1</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;guid&gt;</font><font color="#000000">3a31c01d5c9023115e2433cdb1b6515e</font><font color="#000080">&lt;/guid&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/item&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;item&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 2</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss091#2</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;description&gt;</font><font color="#000000">Description 2</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;guid&gt;</font><font color="#000000">be3e15a372932faea5b235d1965c36bf</font><font color="#000080">&lt;/guid&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/item&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/channel&gt;</font>
<font color="#000080">&lt;/rss&gt;</font></pre>

                This code sample shows you the source of a RSS 1.0 XML file:

                <pre><font color="#800080">&lt;?</font><font color="#000080">xml</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"1.0"</font><font color="#800080"> </font><font color="#008080">encoding</font><font color="#800080">=</font><font color="#7F007F">"ISO-8859-1"</font><font color="#800080">?&gt;</font>
<font color="#000080">&lt;rdf:RDF</font>
<font color="#800080">    </font><font color="#008080">xmlns</font><font color="#800080">=</font><font color="#7F007F">"http://purl.org/rss/1.0/"</font>
<font color="#800080">    </font><font color="#008080">xmlns:rdf</font><font color="#800080">=</font><font color="#7F007F">"http://www.w3.org/1999/02/22-rdf-syntax-ns#"</font>
<font color="#800080">    </font><font color="#008080">xmlns:dc</font><font color="#800080">=</font><font color="#7F007F">"http://purl.org/dc/elements/1.1/"</font><font color="#000080">&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;channel</font><font color="#800080"> </font><font color="#008080">rdf:about</font><font color="#800080">=</font><font color="#7F007F">""</font><font color="#000080">&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Yellow Duck Framework</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;description&gt;</font><font color="#000000">News about the Yellow Duck Framework</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss10</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;dc:date&gt;</font><font color="#000000">2004-05-22T13:36:11+01:00</font><font color="#000080">&lt;/dc:date&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;items&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;rdf:Seq&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;rdf:li</font><font color="#800080"> </font><font color="#008080">rdf:resource</font><font color="#800080">=</font><font color="#7F007F">"http://localhost/ydf2/?do=rss10#1"</font><font color="#000080">/&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;rdf:li</font><font color="#800080"> </font><font color="#008080">rdf:resource</font><font color="#800080">=</font><font color="#7F007F">"http://localhost/ydf2/?do=rss10#2"</font><font color="#000080">/&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;/rdf:Seq&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/items&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/channel&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;item</font><font color="#800080"> </font><font color="#008080">rdf:about</font><font color="#800080">=</font><font color="#7F007F">"http://PClaerho1/ydf2/examples/?do=rss10#1"</font><font color="#000080">&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;dc:format&gt;</font><font color="#000000">text/html</font><font color="#000080">&lt;/dc:format&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 1</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/feedcreator1.php?do=rss10#1</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;description&gt;</font><font color="#000000">Description 1</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/item&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;item</font><font color="#800080"> </font><font color="#008080">rdf:about</font><font color="#800080">=</font><font color="#7F007F">"http://PClaerho1/ydf2/examples/?do=rss10#2"</font><font color="#000080">&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;dc:format&gt;</font><font color="#000000">text/html</font><font color="#000080">&lt;/dc:format&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 2</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/feedcreator1.php?do=rss10#2</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;description&gt;</font><font color="#000000">Description 2</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/item&gt;</font>
<font color="#000080">&lt;/rdf:RDF&gt;</font></pre>

                The code for an RSS 2.0 feed looks as follows:

                <pre><font color="#800080">&lt;?</font><font color="#000080">xml</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"1.0"</font><font color="#800080"> </font><font color="#008080">encoding</font><font color="#800080">=</font><font color="#7F007F">"ISO-8859-1"</font><font color="#800080">?&gt;</font>
<font color="#000080">&lt;rss</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"2.0"</font><font color="#000080">&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;channel&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Yellow Duck Framework</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;description&gt;</font><font color="#000000">News about the Yellow Duck Framework</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss20</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;lastBuildDate&gt;</font><font color="#000000">Sat, 22 May 2004 13:36:15+0100</font><font color="#000080">&lt;/lastBuildDate&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;item&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 1</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss20#1</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;description&gt;</font><font color="#000000">Description 1</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;guid&gt;</font><font color="#000000">d1c9daf41c19e53ed46f8081d4ab99b7</font><font color="#000080">&lt;/guid&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/item&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;item&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 2</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=rss20#2</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;description&gt;</font><font color="#000000">Description 2</font><font color="#000080">&lt;/description&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;guid&gt;</font><font color="#000000">7dbd540a343ecc960efa3c1d9f715e74</font><font color="#000080">&lt;/guid&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/item&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/channel&gt;</font>
<font color="#000080">&lt;/rss&gt;</font></pre>

                Atom looks similar, but has again some very subtle differences:

                <pre><font color="#800080">&lt;?</font><font color="#000080">xml</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"1.0"</font><font color="#800080"> </font><font color="#008080">encoding</font><font color="#800080">=</font><font color="#7F007F">"utf-8"</font><font color="#800080">?&gt;</font>
<font color="#000080">&lt;feed</font><font color="#800080"> </font><font color="#008080">version</font><font color="#800080">=</font><font color="#7F007F">"0.1"</font><font color="#800080"> </font><font color="#008080">xmlns</font><font color="#800080">=</font><font color="#7F007F">"http://example.com/newformat#"</font><font color="#000080">&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Yellow Duck Framework</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;subtitle&gt;</font><font color="#000000">News about the Yellow Duck Framework</font><font color="#000080">&lt;/subtitle&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=atom</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;entry&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 1</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=atom#1</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;created&gt;</font><font color="#000000">2004-05-22T13:36:19+01:00</font><font color="#000080">&lt;/created&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;issued&gt;</font><font color="#000000">2004-05-22T13:36:19+01:00</font><font color="#000080">&lt;/issued&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;modified&gt;</font><font color="#000000">2004-05-22T13:36:19+01:00</font><font color="#000080">&lt;/modified&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;id&gt;</font><font color="#000000">2e3c209c100c00c83a791fdbc0c6af1b</font><font color="#000080">&lt;/id&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;content</font><font color="#800080"> </font><font color="#008080">type</font><font color="#800080">=</font><font color="#7F007F">"text/html"</font><font color="#800080"> </font><font color="#008080">xml:lang</font><font color="#800080">=</font><font color="#7F007F">"en-us"</font><font color="#000080">&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;div</font><font color="#800080"> </font><font color="#008080">xmlns</font><font color="#800080">=</font><font color="#7F007F">"http://www.w3.org/1999/xhtml"</font><font color="#000080">&gt;</font>
<font color="#000000">                Description 1</font>
<font color="#000000">            </font><font color="#000080">&lt;/div&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/content&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/entry&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;entry&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;title&gt;</font><font color="#000000">Title 2</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;link&gt;</font><font color="#000000">http://localhost/ydf2/?do=atom#2</font><font color="#000080">&lt;/link&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;created&gt;</font><font color="#000000">2004-05-22T13:36:19+01:00</font><font color="#000080">&lt;/created&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;issued&gt;</font><font color="#000000">2004-05-22T13:36:19+01:00</font><font color="#000080">&lt;/issued&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;modified&gt;</font><font color="#000000">2004-05-22T13:36:19+01:00</font><font color="#000080">&lt;/modified&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;id&gt;</font><font color="#000000">5d7ed2c293a6e24c9be308e81a2fb8f5</font><font color="#000080">&lt;/id&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;content</font><font color="#800080"> </font><font color="#008080">type</font><font color="#800080">=</font><font color="#7F007F">"text/html"</font><font color="#800080"> </font><font color="#008080">xml:lang</font><font color="#800080">=</font><font color="#7F007F">"en-us"</font><font color="#000080">&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;div</font><font color="#800080"> </font><font color="#008080">xmlns</font><font color="#800080">=</font><font color="#7F007F">"http://www.w3.org/1999/xhtml"</font><font color="#000080">&gt;</font>
<font color="#000000">                Description 2</font>
<font color="#000000">            </font><font color="#000080">&lt;/div&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/content&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/entry&gt;</font>
<font color="#000080">&lt;/feed&gt;</font></pre>

                As you can see with the different examples, the idea is always
                the same. First, you have the properties of the feed itself, 
                which contains a title, a link, the actual URL of the XML file
                and so. Then you have one or more entries which again have their
                own set of properties.

                <br/><br/>

                The YDFeedCreator class in the Yellow Duck Framework provides
                you with an object oriented way of generating these XML files.
                
                <i><b>Note</b>: The YDFeedCreator class will try to make all the 
                data you put in the feed XML compliant, but sometimes, this is 
                not possible. You might end up with feed that are not 100% valid 
                in that sense.</i>

                <br/><br/>

                <i><b>Note</b>: Atom feeds have the most strict specification
                and expects you to make all the HTML contents you put in e.g.
                the item descriptions valid XML.</i>

            </section>

            <section name="ch13_02" label="Setting up the feed">

                <br/>

                When we want to make a new feed, we first have to setup the feed
                itself. The following code sample illustrates this:

                <pre><font color="#00007F">$fc</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDFeedCreator</font><font color="#000000">();</font>
<font color="#00007F">$fc</font><font color="#000000">-&gt;</font><font color="#000033">setTitle</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'Yellow Duck Framework'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$fc</font><font color="#000000">-&gt;</font><font color="#000033">setDescription</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'News about the Yellow Duck Framework'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$fc</font><font color="#000000">-&gt;</font><font color="#000033">setLink</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'http://localhost/ydf2/'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                In the above code sample, we first created a new instance of the
                YDFeedCreator class. Please note that we didn't specify the
                format of the feed yet, as we will do this only when the actual
                feed get's created.

                <br/><br/>

                The second and third line define the title and the description
                of the feed. The description of the feed is the only one that
                supports embedded HTML. If you specified HTML in the title of
                the feed, this will be removed automatically. The description is
                an optional item for the feed and can be omitted.

                <br/><br/>

                The last line defines the source of the feed. This is normally a
                a link to the website where the XML data came from. This is not
                the same as the actual URL of the XML data.

            </section>

            <section name="ch13_03" label="Adding items">

                <br/>

                Now that the feed is setup correctly, we can start adding items
                to it. When you add an item, we can use the following code to do
                this:

                <pre><font color="#00007F">$fc</font><font color="#000000">-&gt;</font><font color="#000033">addItem</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'Title 1 &amp; Co.'</font><font color="#000000">,</font><font color="#000033"> </font>
<font color="#000033">        </font><font color="#009F00">'http://localhost/ydf2/#1'</font><font color="#000000">,</font><font color="#000033"> </font>
<font color="#000033">        </font><font color="#009F00">'Description 1 &amp; Co.'</font>
<font color="#000000">);</font>
<font color="#00007F">$fc</font><font color="#000000">-&gt;</font><font color="#000033">addItem</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'Title 2 &amp; Co.'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'http://localhost/ydf2/#2'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'Description &lt;b&gt;2&lt;/b&gt; &amp; Co.'</font>
<font color="#000000">);</font></pre>

                By using the addItem function of the YDFeedCreator object, we
                can add new items to the feed. Each item requires a number of
                parameters.

                <br/><br/>

                For each feed item, a title and a link are required. The link is
                the actual URL pointing to the entry itself on the original
                website. Additionally, you can add a description as well which
                can contain HTML data, although, it's not required.

                <br/><br/>

                As the last argument, you can specify a GUID (Global Unique
                Identifier) for your item. This is the identifier that uniquely
                identifies this item. If you omit this, the Yellow Duck
                Framework will create one automatically for you.

                <br/><br/>
                
                The automatic GUID is created by making the checksum of the link
                of the original website, the link of the item and the title of
                the item. If you don't want to use the automatic GUID creation,
                you can create your own.

            </section>

            <section name="ch13_04" label="Outputting the feed">

                <br/>

                After setting up the feed, and adding the items, we can create
                the XML version of the feed. This is done by using either the
                <code>toXml</code> or <code>outputXml</code> class functions.

                <br/><br/>

                The <code>toXml</code> will convert the feed to XML and will
                return as string representation of the feed. The
                <code>outputXml</code> function will also convert the feed to
                XML, but will output it directly to the browser using the
                correct HTTP headers to indicate that the contents being send is
                XML and not HTML.

                <br/><br/>

                Both functions take one argument which defines which kind of XML
                needs to be outputted. If no format is specified, it will
                assume that you want to output RSS 2.0. The following formats
                are supported:

                <div><ul>
                    <li>RSS0.91</li>
                    <li>RSS1.0</li>
                    <li>RSS2.0</li>
                    <li>ATOM</li>
                </ul></div>

                There is also a little helper function called
                <code>getColoredXml</code> which will return a HTML version of
                the XML version of the feed with colored XML tags. This is
                mainly used for debugging purposes. This function takes the same
                arguments as the <code>toXml</code> and <code>outputXml</code>
                functions.

            </section>

            <section name="ch13_05" label="More information">

                <br/>

                More information about RSS, Atom and content syndication can be
                found on the internet. Here's some sites that are really
                handy to keep as a reference:

                <div><ul>
                    <li><a target="_blank" href="http://www.mnot.net/drafts/draft-nottingham-atom-format-02.html">The Atom Syndication Format 0.3 (PRE-DRAFT)</a></li>
                    <li><a target="_blank" href="http://my.netscape.com/publish/formats/rss-spec-0.91.html">RSS 0.91 Specification (Netscape)</a></li>
                    <li><a target="_blank" href="http://backend.userland.com/rss091">RSS 0.91 Specification (UserLand)</a></li>
                    <li><a target="_blank" href="http://groups.yahoo.com/group/syndication/message/372">RSS 1.0 Specification</a></li>
                    <li><a target="_blank" href="http://blogs.law.harvard.edu/tech/rss">RSS 2.0 Specification</a></li>
                    <li><a target="_blank" href="http://www.mnot.net/rss/tutorial/">RSS Tutorial for Content Publishers and Webmasters</a></li>
                </ul></div>

                <i><b>Note</b>: please note that some of the RSS and Atom 
                versions are still being actively developed and have not reached
                their final versions yet. The Yellow Duck Framework will keep up
                with new versions and make sure they are supported.</i>

                <page-break />

            </section>

        <section name="ch14" label="Debugging tools" />

            <section name="ch14_01" label="Overview">

                <br/>

                Debugging is an integral part of every web application. 
                Debugging is the art of finding problems in your web application
                and fixing them. In the Yellow Duck Framework, there are a
                number of tools in addition to the standard PHP tools that will
                help you debugging your applications.

            </section>

            <section name="ch14_02" label="Showing debug information">

                <br/>

                When the Yellow Duck Framework is initialized, it automatically
                defines a constant called YD_DEBUG which is a boolean telling us
                if we are running in debug mode or not. Depending on this 
                setting, the framework will either show or hide debugging
                information.

                <br/><br/>

                There are a number of ways of turning on debugging in the
                Yellow Duck Framework. The first and easiest one is to add the
                parameter YD_DEBUG=1 to the URL of the request. This will
                enable showing of the debug message. Take a look at the 
                following URLs which demonstrate this:

                <pre>http://localhost/test.php?YD_DEBUG=1
http://localhost/test.php?id=01&#38;YD_DEBUG=1</pre>

                This option will turn on the debug messages for the current
                request only. If you are developing a new application, it might
                be easier to constantly turn on debugging. This is done by
                defining a constant called YD_DEBUG <b>before</b> you include
                the YDF2_init.php file. Having this constant defined before you
                initialize the framework will override the default debugging
                settings, and will force the debugging to be turned on or off.

                <br/><br/>

                <i><b>Note</b>: for release applications, you want to prevent
                users from seeing debug information. In order to prevent people
                from using the YD_DEBUG URL parameter to show debug information,
                which can reveal confidential information, make sure you define
                the YD_DEBUG constant with a value of 0 before you initialize 
                the framework.</i>

                <br/><br/>

                Now that we know how debugging information can be enabled, let's
                have a look at how the Yellow Duck Framework displays this
                information. We specifically choose not to use any popup windows
                for this or display the information in the visible HTML code,
                since both methods are not easy to handle. In the Yellow Duck
                Framework, debugging information is added to the source code in
                the form of HTML comments. This makes it easy to find them
                without screwing up the layout of your pages. The following code
                snippet shows you an example of HMTL code with debugging
                information added:

                <pre><font color="#000000">Supported languages: en</font>
<font color="#000080">&lt;pre&gt;</font><font color="#000000">'en'</font><font color="#000080">&lt;/pre&gt;</font>
<font color="#000000">Supported languages: nl, fr, en</font>
<font color="#000080">&lt;pre&gt;</font><font color="#000000">'en'</font><font color="#000080">&lt;/pre&gt;</font>
<font color="#000000">Browser languages:</font>
<font color="#000080">&lt;pre&gt;</font><font color="#000000">array (</font>
<font color="#000000">  0 =</font><font color="#800080">&amp;gt;</font><font color="#000000"> 'en',</font>
<font color="#000000">  1 =</font><font color="#800080">&amp;gt;</font><font color="#000000"> 'nl',</font>
<font color="#000000">  2 =</font><font color="#800080">&amp;gt;</font><font color="#000000"> 'fr',</font>
<font color="#000000">)</font><font color="#000080">&lt;/pre&gt;</font>
<font color="#808000">&lt;!-- [ YD_DEBUG ]</font>
<font color="#808000">Processing time: 28 ms</font>
<font color="#808000">--&gt;</font>

<font color="#808000">&lt;!-- [ YD_DEBUG ]</font>

<font color="#808000">No database queries executed.</font>
<font color="#808000">--&gt;</font>

<font color="#808000">&lt;!-- [ YD_DEBUG ]</font>
<font color="#808000">Total size include files: 130 KB</font>
<font color="#808000">--&gt;</font>

<font color="#808000">&lt;!-- [ YD_DEBUG ]</font>
<font color="#808000">Includes:</font>
<font color="#808000">c:\apache\htdocs\ydf2\examples\language1.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDF2_init.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDBase.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\3rdparty\PEAR\PEAR.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDError.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDObjectUtil.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDTimer.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDRequest.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDTemplate.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\3rdparty\PEAR\Savant.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDLanguage.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDClasses\YDDebugUtil.php</font>
<font color="#808000">c:\apache\htdocs\ydf2\YDFramework2\YDF2_process.php</font>
<font color="#808000">--&gt;</font></pre>

                As you can see, the debug comments from the framework are always
                prepended but the text "[ YD_DEBUG ]" to make them easily
                recognizable. Each debug comment will also start on a new line
                to make it even easier.

            </section>

            <section name="ch14_03" label="Standard debug information">

                <br/>

                By default, the Yellow Duck Framework shows a whole bunch of
                standard extra information if you turn on debugging. The
                following information is always shown in debugging mode:

                <div><ul>
                    <li>The total processing time in seconds for this 
                    request.</li>
                    <li>The number of database queries that were executed.</li>
                    <li>The total filesize of the include files.</li>
                    <li>The list of the full paths of the included files.</li>
                </ul></div>

                In the next section, we will see that it's very easy to add your
                own debugging information.

            </section>

            <section name="ch14_04" label="Adding debugging information">

                <br/>
                
                To add your own debugging information, you can use the
                YDDebugUtil module. This module has three static functions
                specifically designed for debugging purposes.

                <br/><br/>

                By using the static function call 
                <code>YDDebugUtil::debug</code>, we can show our own debugging
                information. This function takes a variable number of arguments
                and will glue all these together before showing the debug 
                message.

                <br/><br/>

                The static function call <code>YDDebugUtil::dump</code> will
                dump the contents of any variable and display it on the screen.
                It basically does the same as the native <code>var_dump</code>
                function from PHP, but the output is much more readable.

                <br/><br/>

                The static function call <code>YDDebugUtil::r_dump</code> does
                the same as the <code>YDDebugUtil::dump</code> function, but it
                will return the information instead of displaying it. If you
                combine this function together with the function
                <code>YDDebugUtil::debug</code>, you can dump the contents of 
                a variable as a debug message.

                <page-break />

            </section>

        <section name="ch15" label="Other classes and modules" />

            <section name="ch15_01" label="What is discussed in this chapter?">

                <br/>

                In this chapter, we will discuss some of the smaller classes and
                modules. There are a whole bunch of small extra things in the
                Yellow Duck Framework that take care of some very specific
                functions. Most of these classes are not rocket science, but
                they make that you don't have to reinvent the wheel every time
                you need them.

            </section>

            <section name="ch15_02" label="YDArrayUtil">

                <br/>

                The YDArrayUtil module houses all the different function related
                to handling of arrays. Currently, there is only one function in
                this module which converts a single-dimension array to a
                two-dimension array (table). Let's take a look at an example.

                <br/><br/>

                The original array looked as follows:

                <pre>array (
  0 => 1,
  1 => 2,
  2 => 3,
  3 => 4,
  4 => 5,
  5 => 6,
  6 => 7,
)</pre>

                Let's say we want to convert it to a table with 3 columns, we
                can do the following:

                <pre><font color="#000033">YDArrayUtil</font><font color="#000000">::</font><font color="#000033">convertToTable</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$array</font><font color="#000000">,</font><font color="#000033"> </font><font color="#CC9900">3</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The new array will look as follows:

                <pre>array (
  0 => 
  array (
    0 => 1,
    1 => 2,
    2 => 3,
  ),
  1 => 
  array (
    0 => 4,
    1 => 5,
    2 => 6,
  ),
  2 => 
  array (
    0 => 7,
  ),
)</pre>

                There is a switch for the <code>convertToTable</code> that can
                fill the last row with null values so that it matches the
                correct number of columns.

                <br/><br/>

                This function was primarly made for use in things such as 
                image galleries that need to display their contents in columns.
                It can of course be used for a lot more than just image 
                galleries.

            </section>

            <section name="ch15_03" label="YDBrowserInfo">
                
                <br/>

                The YDBrowserInfo object returns information about the browser
                that performed the request. The YDBrowserInfo will check the
                headers and extract information such as the version of the
                browser, the name of the browser and the platform on which the
                browser is running.

                <br/><br/>

                The following code sample demonstrates how to use this class:

                <pre><font color="#00007F">$browser</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDBrowserInfo</font><font color="#000000">()</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$browser</font><font color="#000000">-&gt;</font><font color="#000033">getAgent</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$browser</font><font color="#000000">-&gt;</font><font color="#000033">getBrowser</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$browser</font><font color="#000000">-&gt;</font><font color="#000033">getVersion</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> browser</font><font color="#000000">-&gt;</font><font color="#000033">getPlatform</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The <code>getBrowser</code> function will return one of the
                following values: ie, safari, opera, mozilla or other. The
                <code>getPlatform</code> function will return one of the
                following values: win, mac, linux, unix or other.

                <br/><br/>

                The <code>getAgent</code> function will return the full HTTP
                user agent string as provided by the browser.

                <br/><br/>

                This class is very handy to display specific contents based on
                the browser of the user. You might e.g. specify a different
                stylesheet for Macintosh users compared to the stylesheet used
                for Windows users.

            </section>

            <section name="ch15_04" label="YDError">

                <br/>

                The YDError module provides two classes that are part of the
                error handling in the Yellow Duck Framework. Each YDError object
                has an error message attached to it which can be retrieved using
                the <code>getError</code> function. If not error message was
                specified when creating an instance, the text "Unknown error"
                will be returned.

                <br/><br/>

                If your function returns a YDError object, you can use the
                static function <code>isError</code> from the YDError class
                to find out if the object is a YDError object or not. You can
                only class this function statically.

                <br/><br/>

                There is a special subclass of the YDError class, which is
                called YDFatalError. The difference with the normal error class
                is that the YDFatalError will stop the execution of the current
                script and will display the error message. To raise a fatal
                error, you just need to create an instance of it. An example:

                <pre><font color="#7F007F">new</font><font color="#000033"> YDFatalError</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'My error message'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                If you run this code, the only thing the script will do it to
                show you the error message and the execution of the script will
                be stopped.

            </section>

            <section name="ch15_05" label="YDLanguage">

                <br/>

                The YDLanguage class helps you to choose a language from a list
                of supported languages based on the supported languages from the
                browser.

                <br/><br/>

                This function will check the HTTP_ACCEPT_LANGUAGE header to find
                out which languages the browser supports. It will then check
                that against a list of languages that the class supports and
                will return the name of the most appropriate langauage.

                <br/><br/>

                This class will also take into consideration the right priority
                of the languages specified by the browser. Let's take a look at
                a small example illustrating this. In this example, the browser
                supports the following languages in this specific order: nl
                (dutch), fr (french) and en (english). The code sample looks as
                follows:

                <pre><font color="#00007F">$lang</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDLanguage</font><font color="#000000">(</font><font color="#000033"> array</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'en'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'nl'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'fr'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$lang</font><font color="#000000">-&gt;</font><font color="#000033">getLanguage</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                If you run this example, the output of the
                <code>getLanguage</code> function will be "fr". French is the
                first language specified by the browser and is supported by the
                server. If not matching language was found, the first language
                specified by the server will be used. 
                
                <br/><br/>
                
                If no list of supported languages was specified when 
                instantiating this class, the class will assume that only 
                English is supported.

            </section>

            <section name="ch15_06" label="YDObjectUtil">

                <br/>

                The YDObjectUtil module provides you with some class and
                object related static functions. The following functions are 
                available:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="25%"><b>Function</b></td>
                        <td width="75%"><b>Description</b></td>
                    </tr>
                    <tr>
                        <td valign="top">isSubClass</td>
                        <td>This function will check if the specified object is 
                        subclassed from the specified class name or is an 
                        instance of the specified classgetAncestors.</td>
                    </tr>
                    <tr>
                        <td valign="top">getAncestors</td>
                        <td>This function will list you the parent classes of a
                        specific class.</td>
                    </tr>
                    <tr>
                        <td valign="top">failOnMissingMethod</td>
                        <td>This function will raise a fatal exception if the
                        specified object doens't contain the specified
                        function.</td>
                    </tr>
                    <tr>
                        <td valign="top">serialize</td>
                        <td>This function returns a gzipped stream containing a 
                        byte-stream representation of an object that can be
                        stored anywhere.</td>
                    </tr>
                    <tr>
                        <td valign="top">unserialize</td>
                        <td>This function takes a single gzipped serialized 
                        variable (the output from the 
                        <code>YDObjectUtil::serialize()</code> function) and 
                        converts it back into a PHP value.</td>
                    </tr>
                </table></p>

                <i><b>Note</b>: all these functions have to be called 
                statically and thus do not require an instance of the 
                YDObjectUtil class.</i>

            </section>

            <section name="ch15_07" label="YDTimer">

                <br/>

                The YDTimer class offers you with a very easy timer class. It
                will time the execution of whatever you want. The class starts
                counting when you instantiate it, will return you the elapsed
                time when you call it's <code>getElapsed</code> function. The
                result is returned in seconds.

                <br/><br/>

                Let's have a look at a code example:

                <pre><font color="#00007F">$timer</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDTimer</font><font color="#000000">();</font>
<font color="#00007F">$elapsed</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$timer</font><font color="#000000">-&gt;</font><font color="#000033">getElapsed</font><font color="#000000">();</font></pre>

                This $elapsed variable will now contain the time it took from
                the instantiation of YDTimer class till the function call to the
                <code>getElapsed</code> function.

                <br/><br/>

                This class is very handing for timing certains parts of your
                application. You can create multiple instances of the YDTimer
                class which takes care of timing once specific part.

            </section>

    </document-body>

</document>
