<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!DOCTYPE merge [ 
	<!ENTITY fo-related "pdf/postscript/rtf">
	<!ENTITY fop-related "pdf/postscript"> 
]>

<document>

    <document-meta-info>
        <title>Yellow Duck Framework 2.0.0</title>
        <attribute name="Author">
            <a href="mailto:pieter@yellowduck.be">Pieter Claerhout</a>
        </attribute>
    </document-meta-info>

    <document-formatting-info>
        <stylesheet url="style.css" />
        <stylesheet-fo url="style.css" />
        <left-margin>40pt</left-margin>
        <right-margin>40pt</right-margin>
        <top-margin>20pt</top-margin>
        <bottom-margin>30pt</bottom-margin>
        <generate-toc-page>yes</generate-toc-page>
        <header-height>60pt</header-height>
        <footer-height>30pt</footer-height>
    </document-formatting-info>

    <document-header>
        <table width="100%">
            <tr>
                <td valign="middle" align="right">
                    <b>Yellow Duck Framework 2.0.0</b>
                </td>
            </tr>
        </table>
        <hr size="1" color="red" noshade="true" />
    </document-header>

    <document-body>

        <table-of-content>
            <link href="#ch01">Introducing the Yellow Duck Framework
                <link href="#ch01_01">Introduction</link>
                <link href="#ch01_02">Analyzing the workflow</link>
            </link>
            <link href="#ch02">Installing the Yellow Duck Framework
                <link href="#ch02_01">Prerequisites</link>
                <link href="#ch02_02">Examining the Yellow Duck Framework files</link>
                <link href="#ch02_03">Installation overview</link>
                <link href="#ch02_04">Finding a place for the YDFramework2 directory</link>
                <link href="#ch02_05">Assigning rights to the YDFramework2 directory</link>
                <link href="#ch02_06">Configuring Apache to allow .htaccess files</link>
                <link href="#ch02_07">Configuring the PHP options</link>
                <link href="#ch02_08">Denying direct access to the templates</link>
                <link href="#ch02_09">Using auto preprend and auto append</link>
                <link href="#ch02_10">Configuring the samples (advised)</link>
                <link href="#ch02_11">Testing the installation</link>
            </link>
            <link href="#ch03">Writing your first application
                <link href="#ch03_01">Description of the application</link>
                <link href="#ch03_02">Structuring the application</link>
                <link href="#ch03_03">Creating the directory and the files</link>
                <link href="#ch03_04">Implementing the basis of the index.php file</link>
                <link href="#ch03_05">Improving the class constructor</link>
                <link href="#ch03_06">Implementing the default action</link>
                <link href="#ch03_07">Implementing the template</link>
                <link href="#ch03_08">Implementing the addnote action</link>
                <link href="#ch03_09">Implementing the deletenote action</link>
                <link href="#ch03_10">The complete application</link>
            </link>
            <link href="#ch04">How requests are processed
                <link href="#ch04_01">Description</link>
                <link href="#ch04_02">Graphical overview</link>
                <link href="#ch04_03">Where is this processing happening?</link>
                <link href="#ch04_04">Step 1 - Check for a request class</link>
                <link href="#ch04_05">Step 2 - Is the request class derived from YDRequest?</link>
                <link href="#ch04_06">Step 3 - Is the request class properly initialized?</link>
                <link href="#ch04_07">Step 4 - Does this request requires authentication?</link>
                <link href="#ch04_08">Step 5 - Is the specified action allowed?</link>
                <link href="#ch04_09">Step 6 - Process the actual request</link>
                <link href="#ch04_10">What if?</link>
            </link>
            <link href="#ch05">Using templates
                <link href="#ch05_01">Introduction</link>
                <link href="#ch05_02">The YDTemplate class</link>
                <link href="#ch05_03">Template search paths</link>
                <link href="#ch05_04">Standard template variables</link>
                <link href="#ch05_05">PHP configuration for short open tags</link>
            </link>
            <link href="#ch06">Using and validating forms
                <link href="#ch06_01">Background information</link>
                <link href="#ch06_02">The YDForm class</link>
                <link href="#ch06_03">Creating a new form</link>
                <link href="#ch06_04">Adding form elements</link>
                <link href="#ch06_05">The different form elements</link>
                <link href="#ch06_06">Displaying the form</link>
                <link href="#ch06_07">Validating forms</link>
                <link href="#ch06_08">Processing forms</link>
                <link href="#ch06_09">Tips and tricks</link>
                <link href="#ch06_10">More information</link>
            </link>
            <link href="#ch07">Accessing database contents</link>
            <link href="#ch08">How to handle authentication</link>
            <link href="#ch09">Using files, directories and images</link>
            <link href="#ch10">Using URLs and downloading data</link>
            <link href="#ch11">Using XML/RPC clients and servers</link>
            <link href="#ch12">Sending emails</link>
            <link href="#ch13">Other classes and modules</link>
        </table-of-content>
    
        <section name="ch01" label="Introducing the Yellow Duck Framework" />

            <section name="ch01_01" label="Introduction">

                <br/>

                The Yellow Duck framework is web application framework created 
                by Pieter Claerhout. More information can be found on 
                <a target="_blank" href="http://www.yellowduck.be/">http://www.yellowduck.be/</a>.

                <br/><br/>

                he Yellow Duck Framework takes care of all the difficult work
                you normally have to perform manually when developing a web
                application. It is based on the idea of requests that can 
                perform actions. By encapsulating all the programming in an
                object-oriented environment, you get a framework that is easy 
                to use and understand, easy to extend and doesn't limit you in 
                any way.

                <div><ul>
                    <li>Clean separation of code and output</li>
                    <li>Templates for outputting HTML easily</li>
                    <li>Automatic action dispatching using URL parameters</li>
                    <li>Object oriented form construction and validation</li>
                    <li>PEAR based database connectivity which supports all 
                    major database engines such as MySQL, PostgreSQL, Oracle, 
                    Microsoft SQL Server, ...</li>
                    <li>Object oriented handling of authentication</li>
                    <li>To implement the base functionality, a lot of standard 
                    libraries were used. Included is a partial copy of the PEAR
                    library from the PHP project, which provides things such as
                    database connectivity. More information and documentation on 
                    the PEAR library can be found on 
                    <a target="_blank" href="http://pear.php.net/">http://pear.php.net/</a>.</li>
                </ul></div>

            </section>

            <section name="ch01_02" label="Analyzing the workflow">

                <br/>

                In the object oriented nature of the Yellow Duck Framework, each 
                script that gets executed is based on the YDRequest class. This 
                class is smart enough to figure out which functions needs to be
                called using parameters given in the url.

                <br/><br/>

                Let's take a look at an example script to understand how this 
                works:
                
                <pre><font color="#0000FF">&lt;?php</font>

<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_init.php'</font><font color="#000033"> </font><font color="#000000">);</font> 

<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDRequest.php'</font><font color="#000033"> </font><font color="#000000">);</font> 

<font color="#7F007F">class</font><font color="#000033"> sample1Request </font><font color="#7F007F">extends</font><font color="#000033"> YDRequest </font><font color="#000000">{</font> 

<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> sample1Request</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">YDRequest</font><font color="#000000">();</font> 
<font color="#000033">    </font><font color="#000000">}</font> 

<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionDefault</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'sample1Request::actionDefault'</font><font color="#000033"> </font><font color="#000000">);</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font> 
<font color="#000033">    </font><font color="#000000">}</font> 

<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionEdit</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'sample1Request::actionEdit'</font><font color="#000033"> </font><font color="#000000">);</font> 
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font> 
<font color="#000033">    </font><font color="#000000">}</font> 

<font color="#000000">}</font>

<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_process.php'</font><font color="#000033"> </font><font color="#000000">);</font> 

<font color="#0000FF">?&gt;</font></pre>
                
                The template file that goes along with this script looks as
                follows:

                <pre><font color="#000080">&lt;html&gt;</font>
<font color="#000080">&lt;head&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$title</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000080">&lt;/head&gt;</font>
<font color="#000080">&lt;body&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$title</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000080">&lt;/body&gt;</font>
<font color="#000080">&lt;/html&gt;</font>
<font color="#000000"></font></pre>

                When you request the following URL, a number of things happen:

                <pre>http://localhost/sample1.php</pre>

                The first line you see in the sample1.php script is the include 
                of the file called "YDF2_init.php". This file is responsible for 
                setting up the Yellow  Duck Framework, and does things such as:

                <div><ul>
                    <li>Defining a number of constants with e.g. the path to
                    specific directories and URLs</li>
                    <li>Starts or restores the previous session</li> 
                    <li>Reconfigures the PHP include path</li>
                    <li>Includes the different files from the rest of the 
                    framework</li>
                </ul></div>

                After that, we define a new class, called "sample1Request" which 
                is based on the YDRequest class. For each script, you need to 
                have 1 class which is named as the basename of the file (sample1 
                in this case) and is appended with the string "Request". This 
                class should have the YDRequest class as one of it ancestors.

                <br/><br/>

                Since we are inheriting from the YDRequest class, we initialize 
                the parent class in the class constructor of the sample1Request
                class.

                <br/><br/>

                Then we see two functions that start with the text "action". All
                functions that implement actions start with "action". We will 
                see later on how you can choose which one gets executed.

                <br/><br/>
                The last part of the script is the include of the
                "YDF2_process.php" script, which processes the actual request.
                It will look for a request class based on the name of the file,
                and will execute the process function of that class. This is
                where the magic happens.

                <br/><br/>

                The process function checks the URL to see if there was a
                parameter defined with the name "do". This parameter can
                indicate the action that needs to be executed. If the url looked
                as follows, the function called "actionEdit" will be executed.

                <pre>http://localhost/sample1.php?do=edit</pre>

                If no action is specified in the url, the default action,
                called "actionDefault" will be executed. In both actions, the 
                functions in this script don't do a lot. 
                They will set a template variable called "title" and they will 
                output the template to the browser. The template contains 
                special tags that are filled in on the fly with the right 
                contents.

                <page-break />

            </section>

        <section name="ch02" label="Installing the Yellow Duck Framework" />

            <section name="ch02_01" label="Prerequisites">

                <br/>

                To use the Yellow Duck Framework, you need to have the following prerequisites:

                <div><ul>
                    <li>PHP version 4.x (tested with PHP 4.3)</li>
                    <li>Webserver capable of running PHP script, such as Apache or Microsoft Internet
                    Information Server</li>
                </ul></div>
              
            </section>

            <section name="ch02_02" label="Examining the Yellow Duck Framework files">

                <br/>
                
                When you downloaded the latest release of the Yellow Duck 
                Framework, you need to decompress it unzip e.g. winzip (Winzip) 
                or the tar command (unix/linux). After decompressing, you will 
                have the following directory structure:

                <pre>+- YDFramework-2.0.0
   +- index.php
   +- index.tpl
   +- ...
   +- YDFramework2
      +- 3rdparty
      +- docs
      +- temp
      +- YDClasses</pre>

                The main directory of the framework, called "YDFramework-2.0.0"
                in this example, contains a number of sample files. In this
                directory, there is also a directory called "YDFramework2",
                which contains the actual framework files. There are a number of
                subdirectories in the YDFramework2 directory which each have a
                specific function:

                <div><ul>
                    <li>3rdparty: This directory contains the third party 
                    libraries that are needed for the Yellow Duck Framework to 
                    work properly. You will find a local copy of the PEAR 
                    libraries and the other third party libraries in here.</li>
                    <li>docs: This directory contains the documentation at which
                    you are currently looking. It also contains the complete API
                    documentation.</li>
                    <li>temp: This directory contains the temporary files
                    created by the framework. In here, the compiled versions of 
                    the templates are saved.</li>
                    <li>YDClasses: In here, you will find all the classes that
                    make up the framework.</li>
                </ul></div>

                This directory structure is not really important for using the
                Yellow Duck Framework. The only thing you might need to do from
                time to time is to check the temp folder and empty it if it gets
                too big.

                <br/><br/>

                <i><b>Note</b>: You will never have to add or alter files in the 
                YDFramework2 directory. It's not even a good idea to put your
                own files in there as they might get overridden when you upgrade 
                your framework to a newer version.</i>

            </section>

            <section name="ch02_03" label="Installation overview">

                <br/>

                There are a number of steps we need to do to get the framework 
                installed properly. The install instructions here apply to the
                Apache webserver, but similar techniques are available on other
                servers.

                <br/><br/>

                These are the steps needed to install the framework:

                <div><ol>
                    <li>Finding a place for the YDFramework2 directory</li>
                    <li>Assigning rights to the YDFramework2 directory</li>
                    <li>Configuring Apache to allow .htaccess files</li> 
                    <li>Configuring the PHP options</li> 
                    <li>Denying direct access to the templates</li> 
                    <li>Using auto preprend and auto append</li> 
                    <li>Configuring the samples</li> 
                    <li>Testing the installation</li>
                </ol></div>

                The next sections describe these steps in detail.

            </section>

            <section name="ch02_04" label="Finding a place for the YDFramework2 directory">

                <br/>

                The YDFramework2 directory can be placed anywhere in the file 
                system. For security reasons, we suggest you to put the
                YDFramework directory in a directory which is not viewable by
                the webserver. It's not a good idea to put the YDFramework2
                directory into the htdocs folders from Apache.

                <br/><br/>

                The YDFramework2 directory can also be shared among multiple web
                applications. You only need 1 YDFramework2 directory on your 
                system. You can if you want install a separate copy for each 
                web application.

            </section>

            <section name="ch02_05" label="Assigning rights to the YDFramework2 directory">

                <br/>

                Since the framework needs to be able to write temporary data 
                into it's temp directory, we need to change the rights for this 
                folder. On Windows, you normally don't need to change this. On a 
                unix or linux system, you can issue the following command to do
                this:

                <pre>/home/pieter # <b>chmod 777 YDFramework2/temp</b></pre>

                If you are uploading the framework using your FTP client, please
                check the documentation of your FTP client on how to do this.

            </section>

            <section name="ch02_06" label="Configuring Apache to allow .htaccess files">

                <br/>

                <i><b>Note</b>: this is an optional setting and is already done 
                on most systems. You only need to change this if you plan to use 
                .htaccess files to change the PHP settings or if you want to 
                deny access to the template files.</i>

                <br/><br/>

                In the Apache configuration file, you need to change the 
                following for the web directory of your web application:

                <pre><font color="#000080">&lt;Directory "C:/Program Files/Apache/htdocs"&gt;</font>
    AllowOverride All
<font color="#000080">&lt;/Directory&gt;</font></pre>

                With configuring the directory like this in Apache, you indicate 
                that .htaccess files can be used to override the settings.

            </section>

            <section name="ch02_07" label="Configuring the PHP options">

                <br/>

                Now that we configured Apache to accept .htaccess files, create 
                a new file called ".htaccess" and save it in the root of your
                web application. The settings done in the .htaccess file apply
                to the directory in which the file is stored and to all the 
                directories underneath that directory.

                <br/><br/>

                I've added the following configuration values for PHP to the 
                .htaccess file on my system:

                <pre><font color="#007F00"># Disable magic quotes</font>
php_value magic_quotes_gpc 0
php_value magic_quotes_runtime 0
php_value magic_quotes_sybase 0

<font color="#007F00"># Disabled registering of globals and arg*</font>
php_value register_globals 0
php_value register_argc_argv 0

<font color="#007F00"># Disallow some security holes</font>
php_value allow_call_time_pass_reference 0
php_value allow_url_fopen 1
php_flag short_open_tag On
php_flag enable_dl Off

<font color="#007F00"># Gzip compress the output</font>
php_flag output_buffering Off
php_flag zlib.output_compression On</pre>

                With these options turned on, you will have Gzip compressed
                output from the PHP scripts which helps you save bandwith. 
                Registering of global variables and friends are also turned off,
                and magic quotes are disabled.

                <br/><br/>

                In the installation download, there is a sample .htaccess file 
                included which is called "_default.htaccess". Copy it to the 
                root of your web directory and rename it to ".htaccess".

                <br/><br/>

                <i><b>Note</b>: In order to have the examples working, you need 
                to allow short open tags. this can be done by add the following 
                to the .htaccess file:
                    <pre>php_flag short_open_tag On</pre>
                This will enable the use of "&lt;?" as the open tag for PHP
                scripts instead of the standard "&lt;?php".</i>

            </section>

            <section name="ch02_08" label="Denying direct access to the templates">

                <br/>

                Since we do not want people to access the template files 
                directly, we need to tell Apache to deny access to these files. 
                This can be done by adding the following code to the .htaccess
                file:

                <pre><font color="#007F00"># Denying direct access to the templates</font>
<font color="#000080">&lt;FilesMatch "(.tpl|config.php|includes)$"&gt;</font>
    Order allow,deny
    Deny from all
<font color="#000080">&lt;/FilesMatch&gt;</font></pre>

                In the example above, I also denied access to the config.php 
                file, as I do not want people to access this file directly. 
                Access to the YDFramework2 and include directories are also
                denied.

            </section>

            <section name="ch02_09" label="Using auto preprend and auto append">

                <br/>

                Instead of having to include the "YDF2_init.php" and 
                "YDF2_process.php" files manually in each script, you can use 
                the auto preprend and auto append options provided by the PHP
                interpreter.

                <br/><br/>

                To enable this feature, add the following lines to the .htaccess 
                file:
                
                <pre><font color="#007F00"># Auto include the Framework files</font>
php_value auto_prepend_file "C:/YDFramework2/YDF2_init.php"
php_value auto_append_file "C:/YDFramework2/YDF2_process.php"</pre>

                On Windows, please use forward slashes instead of backslashes. 
                Also make sure you use the complete path to the files.

            </section>

            <section name="ch02_10" label="Configuring the samples">

                <br/>

                In order to run the samples, we need to edit the configuration 
                file to point to an existing database and we also need to change 
                the paths to the framework files.

                <br/><br/>

                Open the file called "config.php" which is found in the main 
                directory of the download, and edit the database settings:

                <pre><font color="#0000FF">&lt;?php</font>

<font color="#000033">    </font><font color="#999999">/*</font>
<font color="#999999">     * Very simple configuration file</font>
<font color="#999999">     */</font>

<font color="#000033">    </font><font color="#00007F">$dbAliasses</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'localhost_mysql'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'mysql://root:@localhost/test'</font>
<font color="#000033">    </font><font color="#000000">);</font>

<font color="#0000FF">?&gt;</font></pre>

                Once that is done, open each PHP script in the main directory of
                the download, and change the include settings at the top and the
                bottom of the file if needed.

                <br/><br/>

                For testing purposes, it's easier to leave the YDFramework2 
                directory in the same directory as the sample files, as you 
                don't need to alter any paths if you do so.

            </section>

            <section name="ch02_11" label="Testing the installation">

                <br/>

                To test the installation, run the sample scripts provided with 
                the downloads.

                <page-break />

            </section>

        <section name="ch03" label="Writing your first application" />

            <section name="ch03_01" label="Description of the application">
                
                <br/>

                The sample application we are going to use is a simple notebook
                which has three options. The following options are supported by 
                our notebook:

                <div><ul>
                    <li>Showing the list of notes (default)</li>
                    <li>Adding a note</li>
                    <li>Deleting a note</li>
                </ul></div>

                We will also use form validation to make sure that the data 
                entered in the add note form is valid. This will prevent people
                from adding notes without a title or body.

                <br/><br/>

                After you finished this chapter, the finished example  
                application will look like this:

                <br/><br/>

                <img src="ydf2_02_001.gif" border="0" width="415" height="286" />

                <br/><br/>

                The screen above is used for listing and deleting notes. This
                screen will also show you a link to the screen that is used for
                adding new notes.

                <br/><br/>

                The interface for adding a new note will look as follows:

                <br/><br/>

                <img src="ydf2_02_002.gif" border="0" width="415" height="286" />

                <br/><br/>

                The delete screen doesn't really have a user interface. It will
                remove the item from the list and reload the list once that is 
                done.

                <br/><br/>

                <i><b>Note</b>: In order no to over complicate this example, we 
                will store the notes as files on the disk instead of using a 
                database.</i>

            </section>

            <section name="ch03_02" label="Structuring the application">
                
                <br/>

                Before you start writing the actual code, you need to do a 
                little bit of planning and determine which actions you will 
                create to make your application work. In our case, we are going 
                to make 3 different actions:

                <div><ul>
                    <li><b>default</b>: this is the default action and will show 
                    the list of notes. If no notes are found, it should tell us 
                    so.</li>
                    <li><b>addnote</b>: this action will take care of adding a 
                    new note. It will render the form you need to fill in, but 
                    it will also take care of handling the form correctly and
                    saving the result to disk.</li>
                    <li><b>deletenote</b>: this function will delete a note 
                    based on it's unique ID. In this example, it will not ask 
                    you for confirmation, but it will simply delete the 
                    note.</li>
                </ul></div>

                Now that we know what actions the application will be able to 
                perform, we now need to think about how we can store the notes 
                on disk. We will create an associative array for each note which 
                will contain the title, body and the unique ID for the entry.

                <br/><br/>

                The unique ID for an entry will be created by calculating the 
                md5 checksum of the combination of the title and the body. This 
                will ensure that each note is unique.

                <br/><br/>

                <i><b>Note</b>: the example will not warn about the fact that a
                duplicate entry was entered. It will just overwrite the existing 
                one. I'll leave it up to you to implement that yourself after
                finishing this chapter.</i>

                <br/><br/>

                We will use the functions provided by the Yellow Duck Framework 
                to load the notes from disk and save the notes to disk. In the 
                framework, there are different objects and functions that take 
                care of this.

                <br/><br/>

                After going through this example, you will have used and 
                explored the following classes and modules in the Yellow Duck 
                Framework:
                
                <div><ul>
                    <li>YDRequest (class)</li>
                    <li>YDFSDirectory (class)</li>
                    <li>YDFSFile (class)</li>
                    <li>YDForm (class)</li>
                    <li>YDError and YDFatalError (classes)</li>
                    <li>YDObjectUtil (module)</li>
                </ul></div>

                For more detailed information of the functions and variables
                exposed by these classes, consult the <a target="_blank"
                href="api/index.html">API documentation</a>.

            </section>

            <section name="ch03_03" label="Creating the directory and the files">
                
                <br/>

                To start, create a new folder in your webroot called "firstapp". 
                We will store all the files related to this tutorial in that 
                folder.

                <br/><br/>
                
                In this folder, we will need to create two files for our 
                application. We need 1 file called "index.php", which will 
                contain the actual script that drives the application. We will 
                also need a file which is called "index.tpl" which contains the
                template for this application. The template will define how the
                application will be presented in the browser.

                <br/><br/>
                
                By separating the actual script from the presentation, we will
                make the application a lot easier to maintain and understand. By 
                using this structured way, it will be a lot easier to track down 
                problems because you know immediately where to look.

            </section>

            <section name="ch03_04" label="Implementing the basis of the index.php file">
                
                <br/>

                The first thing we will do is to implement the basic stuff of 
                the index.php script. As you could read in the first chapter, 
                the name of the file determines how the class should be named.

                <br/><br/>

                Open the index.php file in a text editor and enter the following
                text in the file:

                <pre><font color="#0000FF">&lt;?php</font>

<font color="#666666">// Initialize the Yellow Duck Framework</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_init.php'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Includes</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDRequest.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDFSDirectory.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDObjectUtil.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDForm.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDError.php'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Class definition for the index request</font>
<font color="#7F007F">class</font><font color="#000033"> indexRequest </font><font color="#7F007F">extends</font><font color="#000033"> YDRequest </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Class constructor</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> indexRequest</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Initialize the parent class</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">YDRequest</font><font color="#000000">();</font>

<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Default action</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionDefault</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Add Note action</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionAddNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Delete Note action</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> actionDeleteNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000000">}</font>

<font color="#666666">// Process the request</font>
<font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/YDFramework2/YDF2_process.php'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#0000FF">?&gt;</font></pre>

                There are a number of rules to follow to get the basis of the 
                class implemented. Let's go over each one of them:

                <div><ul>
                    <li><b>Include the init file</b>: each script that wants to 
                    use the Yellow Duck Framework needs to include the 
                    "YDF2_init.php" file which initializes the framework. Make 
                    sure the path to this file is correct, otherwise, the script
                    will not work.</li>
                    <li><b>Include the needed classes</b>: The next step is to
                    include all the different classes from the framework you are
                    going to use. I used the require_once to make sure the
                    script doesn't continue without having included these files.
                    You don't need to specify the complete path to these files
                    as the framework will take care of finding the right files.
                    </li>
                    <li><b>Define the main class</b>: each script that wants to
                    use the Yellow Duck Framework needs to have a class which 
                    is named after the name of the file. In our example, the 
                    file is named "index.php", which means the framework will
                    search for a class called "indexRequest". This class needs
                    to extends the YDRequest class to allow the framework to 
                    process the request.</li>
                    <li><b>Define the class constructor</b>: When the instance 
                    of our class is created, it will execute the function which 
                    has the same name as the class automatically (this function 
                    is called the class constructor). In the class constructor, 
                    we simply call the YDRequest function (which is the class 
                    constructor from the YDRequest class) to make sure the 
                    parent class is initialized as well.</li>
                    <li><b>Define the functions for the actions</b>: For each 
                    action, we need to create a separate function in the class. 
                    Each function for an action has the name of the action 
                    prepended by "action" as it's function name. By default, 
                    these function do not require any arguments.</li>
                </ul></div>
                
                With this implemented, you can already surf to the index.php
                page, but nothing will be shown. You can try the following URLs:
              
                <pre>http://localhost/firstapp/index.php
http://localhost/firstapp/index.php?do=addnote
http://localhost/firstapp/index.php?do=deletenote
http://localhost/firstapp/index.php?do=oops</pre>

                If you typed in everything correctly, only the last URL should
                return an error because it's pointing to an undefined action in
                our class.

            </section>

            <section name="ch03_05" label="Improving the class constructor">
                
                <br/>

                We will add one thing to the class constructor, which is a 
                reference to the data directory. Before you add the code, make a
                new folder called "data" in the "firstapp" folder. Also make 
                sure that the webserver process can write into that directory. 
                On unix systems, you can do this with the following shell 
                command:

                <pre>/home/pieter # <b>chmod 777 data</b></pre>
                
                Once you did that, add the following code to the class 
                constructor:

                <pre><font color="#666666">// Set the path to the data directory</font>
<font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDFSDirectory</font><font color="#000000">(</font><font color="#000033"> dirname</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">__FILE__</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'/data/'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#666666">// Check if the data directory is writeable</font>
<font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#000000">!</font><font color="#000033"> </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">isWriteable</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font>
<font color="#000033">    </font><font color="#7F007F">new</font><font color="#000033"> YDFatalError</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'Data directory must be writable!'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000000">}</font></pre>
                
                With this code, we create a new YDFSDirectory class which 
                represents a folder on disk. We define it specifically create it 
                in the class constructor to ensure that all the actions are able
                to use this object (each action needs this).

                <br/><br/>

                We also check if the directory is writeable by the webserver 
                process to ensure that we will be able to save the notes in that 
                directory. If the directory is not writable, we will raise a 
                fatal error which stops the execution and displays the error 
                message.

                <br/><br/>

                Later on, we will see that we can use this object to get a 
                directory listing, but we will also use it to delete and create 
                new files.

            </section>

            <section name="ch03_06" label="Improving the class constructor">
                
                <br/>

                We will now implement the default action. Add the following code
                to the function actionDefault:

                <pre><font color="#666666">// Default action</font>
<font color="#7F007F">function</font><font color="#000033"> actionDefault</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Start with an empty list of entries</font>
<font color="#000033">    </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">();</font>

<font color="#000033">    </font><font color="#666666">// Loop over the data directory contents</font>
<font color="#000033">    </font><font color="#7F007F">foreach</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'*.dat'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Get the contents</font>
<font color="#000033">        </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">();</font>

<font color="#000033">        </font><font color="#666666">// Unserialize</font>
<font color="#000033">        </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">unserialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Add it to the list of entries</font>
<font color="#000033">        array_push</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Add the entries to the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'entries'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Output the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font>

<font color="#000000">}</font></pre>

                The code of this function is pretty self explanatory. Let's go 
                over each line to see what it does:

                <pre><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">();</font></pre>

                This line creates a new array which will use to store the
                entries in. 

                <pre><font color="#7F007F">foreach</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'*.dat'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font></pre>

                This line line will query the data directory and get a YDFSFile 
                object for each file that ends with the extension "dat". The 
                getContents function always returns objects.

                <pre><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">-&gt;</font><font color="#000033">getContents</font><font color="#000000">();</font></pre>

                This line line will replace the variable $entry with the
                contents of our YDFSFile object. 

                <pre><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">unserialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Since the entries are serialized, we need to unserialize them to 
                get the original object back. The YDObjectUtil::unserialize 
                function will take care of this.

                <pre><font color="#000033">array_push</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                We now have the original object back, which we will just add to 
                the list of entries.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'entries'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                When a new YDRequest class is instantiated, automatically a new
                template object is created. You can then use the setVar function 
                from the YDRequest class to assign variables to the template. We
                add a new template variable called "entries" which holds the 
                list of entries.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font></pre>

                The last step is to parse the template and output it to the 
                browser. Since we didn't specify the name of the template, it 
                will look for a file with the same name as the script, but which 
                has the extension "tpl" instead of "php". It will parse the 
                template and send the result to the browser.

                <br/><br/>

                If you run the script now in the browser, you will see an empty 
                screen, and no errors should be shown. You don't see anything 
                yet since the template is still an empty file.

            </section>

            <section name="ch03_07" label="Implementing the template">
                
                <br/>

                Now that we have the default action implemented, we will change
                the template so that it shows the list of notes which it should
                do. Here's is how the template looks like to show the list of 
                entries:

                <pre><font color="#000080">&lt;html&gt;</font>

<font color="#000080">&lt;head&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_FW_NAMEVERS</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>

<font color="#000080">&lt;/head&gt;</font>

<font color="#000080">&lt;body&gt;</font>

<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$YD_ACTION</font><font color="#000033"> </font><font color="#000000">==</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">        </font><font color="#000080">&lt;h3&gt;</font><font color="#000000">Notes</font><font color="#000080">&lt;/h3&gt;</font>

<font color="#000000">        </font><font color="#000080">&lt;p&gt;&lt;a</font><font color="#800080"> </font><font color="#008080">href</font><font color="#800080">=</font><font color="#7F007F">"</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_SELF_SCRIPT</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">?do=AddNote"</font><font color="#000080">&gt;</font><font color="#000000">Add a new note</font><font color="#000080">&lt;/a&gt;&lt;/p&gt;</font>

<font color="#000000">        </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">foreach</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entries</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;b&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/b&gt;</font>
<font color="#000000">                [ </font><font color="#000080">&lt;a</font><font color="#800080"> </font><font color="#008080">href</font><font color="#800080">=</font><font color="#7F007F">"</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$YD_SELF_SCRIPT</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">?do=DeleteNote&amp;id=</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#7F007F">"</font><font color="#000080">&gt;</font><font color="#000000">delete</font><font color="#000080">&lt;/a&gt;</font><font color="#000000"> ]</font>
<font color="#000000">                </font><font color="#000080">&lt;br&gt;</font>
<font color="#000000">                </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'body'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">        </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#7F007F">else</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;p&gt;</font><font color="#000000">No notes were found.</font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">        </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000080">&lt;/body&gt;</font>

<font color="#000080">&lt;/html&gt;</font></pre>

                The first thing we do in the template is to check if we are 
                running the default action. Since we are going to combine the 
                templates for all the different actions, we need to make sure we 
                only show the parts relevant for the current action.

                <br/><br/>

                As you can see, this is a plain PHP script which only contains 
                the code needed to display the list. As you can see, we can
                reference the variables as normal PHP variables and show their 
                contents.

                <br/><br/>

                We also use some special variables in the script that are 
                automatically added to the template by the framework. We use 
                the following ones:

                <div><ul>
                    <li><b>$YD_FW_NAMEVERS</b>: the name and the version of the framework</li>
                    <li><b>$YD_ACTION</b>: the name of the current action (always in lowercase)</li>
                    <li><b>$YD_SELF_SCRIPT</b>: the url of the script itself without parameters</li>
                </ul></div>

                If you run the script now, it should tell you that no notes were
                found, as we didn't create any yet. There should also be a link
                that you can use to add a new entry. The next step is to create
                the form to add a new entry.

            </section>

            <section name="ch03_08" label="Implementing the addnote action">
                
                <br/>

                The next step is to implement the action that will take care of 
                adding new items. Add the following code to the actionAddEntry 
                function to do this:

                <pre><font color="#666666">// Add Note action</font>
<font color="#7F007F">function</font><font color="#000033"> actionAddNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Create the add form</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'addEntryForm'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Add the elements</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'text'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'textarea'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'submit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'cmdSubmit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Save'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Apply filters</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Add a rule</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#000033">    </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Process the form</font>
<font color="#000033">    </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">validate</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Save the entries in an array</font>
<font color="#000033">        </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
<font color="#000033">            </font><font color="#009F00">'id'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> md5</font><font color="#000000">(</font>
<font color="#000033">                </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000033">            </font><font color="#000000">),</font>
<font color="#000033">            </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">),</font>
<font color="#000033">            </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000033">        </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Save the serialized entry to a file</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">createFile</font><font color="#000000">(</font>
<font color="#000033">            </font><font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000000">,</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">serialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000033">        </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Forward to the list view</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">        </font><font color="#666666">// Return</font>
<font color="#000033">        </font><font color="#7F007F">return</font><font color="#000000">;</font>

<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000033">    </font><font color="#666666">// Add the form to the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">addForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'form'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Output the template</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font>

<font color="#000000">}</font></pre>

                This action does two separate things. It knows how to show the 
                form which is used to add a new note, and it also knows how to
                save a note to a file on disk which can be retrieved later on.
                
                <br/><br/>

                Let's evaluate this action step by step:

                <pre><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'addEntryForm'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                This will create a new form object called "addEntryForm". We 
                will assign elements to this object to construct the whole form.
                
                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'text'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'textarea'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents:'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addElement</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'submit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'cmdSubmit'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Save'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Now we add three elements to the form. We add a text element 
                called "title", a textarea called "body" and a submit button 
                called "cmdSubmit". For each of these elements, we also specify
                a label.

                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">applyFilter</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'trim'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                To the title and body field, we also add a filter called "trim".
                The trim filter will remove all spaces at the beginning and the 
                end of the form values before validating the form. We do this to 
                make sure that e.g. if the title would be just a space, it 
                wouldn't be considered as being valid.

                <pre><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Title is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">addRule</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'Contents is required'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'required'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                For the validation, we add two rules. With these two rules, we 
                mark the elements title and body as required elements. We also 
                specify the error message in case the validation fails.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">addForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'form'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">);</font></pre>
                
                This function will assign the form object to the template. 
                Please note that we didn't use the setVar function, but used the
                addForm function instead. We need to use this function because 
                the form object needs some special treatment before it can be 
                used in the template. Never use the setVar function to assing a
                form object to the template. 

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">outputTemplate</font><font color="#000000">();</font></pre>

                The last step is to parse and output the template which is done
                by executing the outputTemplate function. 

                <br/><br/>

                <i><b>Note</b>: I specifically didn't explain the part which 
                save the note to a file, as it's not important yet. You first 
                need to understand how this works before we can add the code for 
                saving the note to disk.</i>

                <br/><br/>

                Before you can run the form, we need to add the code for the 
                form to the template. Add the following stuff just before the 
                "&lt;/body&gt;" tag in the template:

                <pre><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$YD_ACTION</font><font color="#000033"> </font><font color="#000000">==</font><font color="#000033"> </font><font color="#009F00">'addnote'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;h3&gt;</font><font color="#000000">Add a new note</font><font color="#000080">&lt;/h3&gt;</font>

<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'errors'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p</font><font color="#800080"> </font><font color="#008080">style</font><font color="#800080">=</font><font color="#7F007F">"color: red"</font><font color="#000080">&gt;&lt;b&gt;</font><font color="#000000">Errors during processing:</font><font color="#000080">&lt;/b&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">foreach</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'errors'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$error</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;br&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$error</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">    </font><font color="#000080">&lt;form</font><font color="#800080"> </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'attributes'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">][</font><font color="#009F00">'label'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;br&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">][</font><font color="#009F00">'html'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'body'</font><font color="#000000">][</font><font color="#009F00">'label'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;br&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'body'</font><font color="#000000">][</font><font color="#009F00">'html'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">[</font><font color="#009F00">'cmdSubmit'</font><font color="#000000">][</font><font color="#009F00">'html'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;/form&gt;</font>

<font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#000000">}</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font></pre>

                If we a look at that code, we see that it will only be shown if
                the current action is called "addnote" (always in lowercase!). 
                The first part will take care of showing the errors if there are
                any.

                <br/><br/>

                The errors are always found in the $form['error'] array. this
                array is just a list of all the different error messages. In 
                this example, we use a little but of stylesheets to make them
                appear in red.

                <br/><br/>

                Then, the code for the form itself is added. We first define the 
                form tag, and use the $form['attributes'] variable to 
                automatically add all the parameters of the form such as the 
                action and method. The framework is smart enough to take care of
                that automatically.

                <br/><br/>

                Then we will add the different elements. Each element can be 
                referenced as $form[elementname]. In this example, we use the 
                label and html properties of each element. The label property 
                contains the label as specified when you created the form 
                object. The html property contains the HTML version of the 
                element.

                <br/><br/>

                This is the only code we need to add for the form. The framework
                will take care of remembering what was entered in each field and
                displays it when needed. It will also take care of the error
                messages.

                <br/><br/>

                Now that we have the basis of the form, you can surf to the 
                index.php page and see what happens. If you submit the form, you
                will see that the values are remembered accross submits, and 
                that the right errors are raised if the input was not valid.

                <br/><br/>

                Let's examine the code that saves the entry to disk. We'll go 
                over it step by step.

                <pre><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">validate</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">{</font></pre>

                With this, we can check if the form was validated succesfully. 
                The form is only validated when all the validation rules were
                passed.

                <pre><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
    <font color="#009F00">'id'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> md5</font><font color="#000000">(</font>
        <font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
    <font color="#000000">),</font>
    <font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">),</font>
    <font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$form</font><font color="#000000">-&gt;</font><font color="#000033">exportValue</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'body'</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000000">);</font></pre>

                This code will create a new associative array with the 
                information of the entry. We can use the form's exportValue 
                function to get the value of a specific field of the form. We 
                used the md5 function to create the unique ID for the entry.

                <pre><font color="#666666">// Save the serialized entry to a file</font>
<font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">createFile</font><font color="#000000">(</font>
    <font color="#00007F">$entry</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000000">,</font><font color="#000033"> YDObjectUtil</font><font color="#000000">::</font><font color="#000033">serialize</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$entry</font><font color="#000033"> </font><font color="#000000">)</font>
<font color="#000000">);</font></pre>

                The next line does two things. First, it will serialize the 
                array of the object. This means it's converted into code which
                can be saved to a file, and which can be read later on again to
                get the original array back. This function is part of the 
                YDObjectUtil module. After we have the array as a serialized
                item, we can use the createFile function from the YDFSDirectory
                object to dump it to a file. The file name will be the id of the 
                entry with the extension "dat".

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                Now that the note is saved to disk, we need to show the list of
                notes again. We have two options here. Either you do a redirect,
                which will redirect you to the url of the default action, but 
                this requires two HTTP interactions. A lot faster is to forward
                the execution to a different action. The difference is that 
                forwarding happens in the same request.

                <pre><font color="#7F007F">return</font><font color="#000000">;</font></pre>

                It's very important to add the return statement, since 
                otherwise, the form will be displayed again.

                <br/><br/>

                <i><b>Note</b>: one could say that instead of forwarding the
                request to a different action, you could just call the function 
                for that action. Unfortunately, that doesn't work, since the 
                framework will not know that the current action has been 
                changed.</i>

                <br/><br/>

                If you run the script now, you will be able to add notes and 
                display them. Also try to add a note without a title or 
                description, and check that it is showing the right errors. Also
                check the contents of the data directory to see that the entries
                are correctly saved in there.

            </section>

            <section name="ch03_09" label="Implementing the deletenote action">
                
                <br/>

                To finish off, we will create the action that can delete a note.
                This action will take 1 parameter from the URL, which is called 
                ID. This entry will contain the unique ID of the entry.

                <br/><br/>

                To implement this action, add the following code to the 
                actiondeletenote function:

                <pre><font color="#666666">// Delete note action</font>
<font color="#7F007F">function</font><font color="#000033"> actionDeleteNote</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// Delete the file related to the entry</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">deleteFile</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$_GET</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000033">    </font><font color="#666666">// Forward to the list view</font>
<font color="#000033">    </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font>

<font color="#000000">}</font></pre>

                Let's go over this action to see how it works:

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">dataDir</font><font color="#000000">-&gt;</font><font color="#000033">deleteFile</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$_GET</font><font color="#000000">[</font><font color="#009F00">'id'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#000000">.</font><font color="#000033"> </font><font color="#009F00">'.dat'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                With the deleteFile function from the YDFSDirectory object, we 
                can delete the file for this specific note. We find the id of 
                the note in the $_GET['id'] variable, which was passed with the
                URL.

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">forward</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'default'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                After the deletion of the file, we just forward the request to 
                the default action again to show the list of the notes.

                <br/><br/>

                After adding this code, you can run the sample again and try to
                delete a note. If you delete the note, it should disappear from
                the list and the file should also be removed from the data
                directory.

                <br/><br/>

                <i><b>Note</b>: there are some functions that could be added to 
                this action. First, it could check if there was an ID given or
                not. If not, you could forward the request to the default
                action, or you could show an error message. You could also add
                some checking to see if the entry exists or not before deleting
                it. Another option is to add a confirmation screen to prevent 
                that someone accidently deletes a note.</i>

            </section>

            <section name="ch03_10" label="The complete application">
                
                <br/>

                You will find a complete working copy of this application in the
                firstapp folder inside the examples folder of the Yellow Duck
                Framework distribution.

                <page-break />

            </section>


        <section name="ch04" label="How requests are processed" />

            <section name="ch04_01" label="Description">
                
                <br/>

                In this chapter, we will see how requests are processed. When 
                you load a request from the browser, a lot of things are 
                performed before the actual action is processed and the contents 
                is displayed to the end user.

            </section>

            <section name="ch04_02" label="Graphical overview">
                
                <br/>

                The following diagram gives you a graphical overview of how 
                requests are processed in the Yellow Duck Framework.

                <br/><br/>

                <img src="RequestProcessing.gif" width="667" height="759" 
                 border="0" />

                <br/><br/>

                This whole process of handling a request is automatically done 
                by the framework. There is no need to code this yourself. Of
                course, if you want, there are a number of things you can
                override in this workflow to make the framework do what you want
                it to do.

            </section>

            <section name="ch04_03" label="Where is this processing happening">
                
                <br/>

                When you load a file that includes the Yellow Duck Framework 
                using the following code, the file will be able to use the 
                functionality of the framework. Including the framework goes 
                as follows:

                <pre><font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDFramework2/YDF2_init.php'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                To process the actual file using the framework, we need to add 
                another include file, but we need to include this at the end of 
                the script. The last line of every script processed with the 
                Yellow Duck Framework should look as follows:

                <pre><font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDFramework2/YDF2_process.php'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The process script is the one that does what is displayed in the
                image above. Without including this file, nothing will be
                executed from the script and you will probably end up with an 
                empty page as the result.

                <br/><br/>

                Let's go over each step in the process to see how it works and
                what influence it has on the processing of the request.

            </section>

            <section name="ch04_04" label="Step 1 - Check for a request class">
                
                <br/>

                When you load a script, the first thing the framework will do is
                to check for a class which is named after the script file. The
                class name always has the same structure. It's basically the 
                basename of the script file with the text "Request" appended to 
                it. Let's take a look at some examples:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="50%"><b>Script name</b></td>
                        <td width="50%"><b>Class name</b></td>
                    </tr>
                    <tr>
                        <td>index.php</td>
                        <td>indexRequest</td>
                    </tr>
                    <tr>
                        <td>processing.php</td>
                        <td>processingRequest</td>
                    </tr>
                    <tr>
                        <td>MyOwnScriptForProcessing.php</td>
                        <td>MyOwnScriptForProcessingRequest</td>
                    </tr>
                </table></p>

                If no class with the given name is declared, the execution will 
                stop with a fatal error indicating this. The fatal error will 
                also stop the execution of the script.

                <br/><br/>

                <i><b>Note</b>: Class names are case insensitive in the Yellow 
                Duck Framework. However, we strongly suggest you to maintain the
                same case as in the filename.</i>

                <br/><br/>

                <i><b>Note</b>: Also note that some characters are not allowed
                as a class name, and as such are not allowed in the filename.
                Especially characters like a dash, a dollar sign,
                ad sign and an ampersand are not allowed.</i>

            </section>

            <section name="ch04_05" label="Step 2 - Is the request class derived from YDRequest?">
                
                <br/>

                The Yellow Duck Framework always expects that the request class 
                has the YDRequest class as one of it's parent classes. This is 
                needed because there are a number of standard functions from the
                YDRequest class that are always expected to be there.

                <br/><br/>

                You don't have to inherit from the YDRequest class directly.
                It's allowed to define your own request class based on the 
                YDRequest class, and inherit from that class instead. You can do
                this to provide basic functionality to your request classes 
                which is not available in the standard YDRequest class. You can
                also use this to change the way requests are processed so that 
                you can tailor the framework to suit your needs.

                <br/><br/>

                If the YDRequest is not one of the parent classes from the 
                request class, a fatal error is raised and the execution of 
                the script will be stopped.

            </section>

            <section name="ch04_06" label="Step 3 - Is the request class properly initialized?">
                
                <br/>

                Inheriting from the YDRequest class is one thing, but it also 
                needs to be initialized properly. In the class constructor, you 
                need to make sure you call the function with the same name as 
                the class name of the parent class to make sure the parent class
                is initialized properly. If you inherit from the YDRequest 
                directly, you code will look as follows:

                <pre><font color="#666666">// Inherit from the YDRequest class</font>
<font color="#7F007F">class</font><font color="#000033"> indexRequest </font><font color="#7F007F">extends</font><font color="#000033"> YDRequest </font><font color="#000000">{</font>

<font color="#000033">    </font><font color="#666666">// This is the class constructor for our class. It is</font>
<font color="#000033">    </font><font color="#666666">// automatically executed by the framework when this class</font>
<font color="#000033">    </font><font color="#666666">// is instantiated.</font>
<font color="#000033">    </font><font color="#7F007F">function</font><font color="#000033"> indexRequest</font><font color="#000000">()</font><font color="#000033"> </font><font color="#000000">{</font>

<font color="#000033">        </font><font color="#666666">// Initialize the parent class, which is the YDRequest</font>
<font color="#000033">        </font><font color="#666666">// class in this example.</font>
<font color="#000033">        </font><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">YDRequest</font><font color="#000000">();</font>
<font color="#000033">    </font>
<font color="#000033">    </font><font color="#000000">}</font>

<font color="#000000">}</font></pre>

                If you would leave out the function call to YDRequest in the 
                above class, a fatal error will be raised indicating that the 
                YDRequest class was not properly initialized. The execution will
                stop at that moment.

                <br/><br/>

                If the YDRequest class was properly initialized, the framework
                will now create an instance of the request class. When 
                instantiating, no parameters are passed to the class constructor
                of the request class.

            </section>

            <section name="ch04_07" label="Step 4 - Does this request requires authentication?">
                
                <br/>

                In every request class, you can enable authentication. If you 
                enable authentication for a request class, the framework will 
                execute certain functions to check if the authentication before
                the request is processed.

                <br/><br/>

                You can enable authentication in a request class by using the 
                following code:

                <pre><font color="#00007F">$this</font><font color="#000000">-&gt;</font><font color="#000033">setRequiresAuthentication</font><font color="#000000">(</font><font color="#000033"> </font><font color="#7F007F">true</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                It will then use the function "isAuthenticated" from the request 
                class to find out if the user is already authenticated. If not, 
                the function "authenticationFailed" is executed which can e.g. 
                redirect to the login. page which takes care of the rest. After
                executing the "authenticationFailed" function, the execution of
                the script is stopped.

                <br/><br/>

                If the "isAuthenticated" function returns true, the class 
                function "authenticationSucceeded" is executed, after which the
                execution of the request continues. This function can for 
                example set a session variable indicating that we are logged in
                or can add an entry to the database.

                <br/><br/>

                Note: for an in depth look at how authentication is handled in 
                the framework, please go through the chapter 
                <section-link href="#ch08">How to handle authentication</section-link>.

            </section>

            <section name="ch04_08" label="Step 5 - Is the specified action allowed?">
                
                <br/>

                After the authentication tokens are checked, the framework will 
                check if the specified action is allowed by calling the 
                "isActionAllowed" function which returns a boolean indicating 
                this. This function can for example limit certain actions to 
                specific conditions such as the username.

                <br/><br/>

                If the "isActionAllowed" function returns false, the function 
                called "actionNotAllowed" will be executed. By default, this 
                function returns a fatal error indicating that the action is not 
                allowed. You can override this function to make this work the 
                way you want. After this function is executed, the processing of 
                the request will stop.

                <br/><br/>

                In the "isActionAllowed" function, you can use the class 
                function "getActionName" to get the name of the current action
                in lowercase. The action name is the same as what is specified 
                with the do function in the URL. If no action is specified, the
                text "default" will be returned which always points to the 
                default action.

            </section>

            <section name="ch04_09" label="Step 6 - Process the actual request">
                
                <br/>

                Now that all the different checks are performed, the process 
                function of the request class is executed. This will figure out
                the right function name for the function for the specified
                action, and it will execute this function.

            </section>

            <section name="ch04_10" label="What if?">
                
                <br/>

                <i>What if I want a different way to specify the actions?</i>

                <br/>

                If you want to specify a different way for the framework to 
                determine the actions, you will need to override the 
                "getActionName" function to make it determine the correct 
                action name

                <br/><br/>

                <i>What if I want a different way of processing the actions?</i>

                <br/>

                You will have to override the "process" function of the request 
                class for this. This will not change the way the different 
                checks are happening though (which is not advised by any means).

                <page-break />

            </section>

        <section name="ch05" label="Using templates" />

            <section name="ch05_01" label="Introduction">

                <br/>

                In this chapter, we will have a closer look at how the template 
                engine in the Yellow Duck Framework is working and how it's 
                implemented. The template engine in the framework is based on 
                PHP and follows the same syntax as any normal PHP file.

            </section>
            
            <section name="ch05_02" label="The YDTemplate class">

                <br/>

                For managing templates, there is a specific class class 
                YDTemplate. If you instantiate this class, you can assign 
                variables to it, and then, using these variables, you can output 
                a named template.

                <br/><br/>

                The following code sample gives you a small example on how this 
                works: 

                <pre><font color="#00007F">$array</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> array</font><font color="#000000">(</font>
<font color="#000033">    array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'author'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Stephen King'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'The Stand'</font>
<font color="#000033">    </font><font color="#000000">),</font>
<font color="#000033">    array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'author'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Neal Stephenson'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Cryptonomicon'</font>
<font color="#000033">    </font><font color="#000000">),</font>
<font color="#000033">    array</font><font color="#000000">(</font>
<font color="#000033">        </font><font color="#009F00">'author'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Milton Friedman'</font><font color="#000000">,</font>
<font color="#000033">        </font><font color="#009F00">'title'</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#009F00">'Free to Choose'</font>
<font color="#000033">    </font><font color="#000000">)</font>
<font color="#000000">);</font>

<font color="#00007F">$template</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDTemplate</font><font color="#000000">();</font>
<font color="#00007F">$template</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'title'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#009F00">'This is the title'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$template</font><font color="#000000">-&gt;</font><font color="#000033">setVar</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'array'</font><font color="#000000">,</font><font color="#000033"> </font><font color="#00007F">$array</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$template</font><font color="#000000">-&gt;</font><font color="#000033">getOutput</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'mytemplate'</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The template for this code could look as follows:

                <pre><font color="#000080">&lt;html&gt;</font>

<font color="#000080">&lt;head&gt;</font>
<font color="#000000">    </font><font color="#000080">&lt;title&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$title</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/title&gt;</font>
<font color="#000080">&lt;/head&gt;</font>

<font color="#000080">&lt;body&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">if</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> is_array</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$book</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#000000">):</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;table&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;tr&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;th&gt;</font><font color="#000000">Author</font><font color="#000080">&lt;/th&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;th&gt;</font><font color="#000000">Title</font><font color="#000080">&lt;/th&gt;</font>
<font color="#000000">            </font><font color="#000080">&lt;/tr&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">foreach</font><font color="#000033"> </font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$book</font><font color="#000033"> </font><font color="#7F007F">as</font><font color="#000033"> </font><font color="#00007F">$key</font><font color="#000033"> </font><font color="#000000">=&gt;</font><font color="#000033"> </font><font color="#00007F">$val</font><font color="#000033"> </font><font color="#000000">):</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;tr&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;td&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$val</font><font color="#000000">[</font><font color="#009F00">'author'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/td&gt;</font>
<font color="#000000">                    </font><font color="#000080">&lt;td&gt;</font><font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$val</font><font color="#000000">[</font><font color="#009F00">'title'</font><font color="#000000">]</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font><font color="#000080">&lt;/td&gt;</font>
<font color="#000000">                </font><font color="#000080">&lt;/tr&gt;</font>
<font color="#000000">            </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">endforeach</font><font color="#000000">;</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;/table&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">else</font><font color="#000000">:</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000000">        </font><font color="#000080">&lt;p&gt;</font><font color="#000000">There are no books to display.</font><font color="#000080">&lt;/p&gt;</font>
<font color="#000000">    </font><font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">endif</font><font color="#000000">;</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>
<font color="#000080">&lt;/body&gt;</font>

<font color="#000080">&lt;/html&gt;</font></pre>

                As you can see, we assigned two variables to our template 
                instance. Each variable you want to use in the template engine 
                needs to be assigned to the template instance before you can use 
                it. Assigning a variable to a template implies that we attach a 
                template variable name to a PHP object. These objects can be
                anything from an array, a simple string to even a complete 
                object.

                <br/><br/>

                Once we assigned all the variables, we can issue the "getOutput"
                function of the template class to get the result of the parsed 
                template. This function takes one argument, which is the name of 
                the template.

                <br/><br/>

                The name of the template you need to specify for the "getOutput"
                function is the basename of the template without the "tpl"
                extension. In our example, you would need the following files to
                make the example work:

                <div><ul>
                    <li><b>mytemplate.php</b>: the actual PHP script</li>
                    <li><b>mytemplate.tpl</b>: the template attached to the PHP script</li> 
                </ul></div>

                By convention, all templates have the extension "tpl". This is 
                also hardcoded in the framework itself. Please, stick to this 
                standard.

            </section>
            
            <section name="ch05_03" label="Template search paths">

                <br/>

                There are different ways on where the template engine will
                search for templates. By default, there are two possible ways of
                specifying the path for the templates:

                <div><ul>
                    <li><b>Template specified by base name</b>: this will cause 
                    the template engine to look in the same directory as the 
                    current script.</li>
                    <li><b>Template specified by a full path</b>: this will 
                    cause the template engine to look for the template at the 
                    specified path.</li> 
                </ul></div>
                
                If you want, you can override the default search path for the 
                templates. This is done by the class function "setTemplateDir" 
                of the template class. With this function, you can add an extra 
                path to the search path of the template class. After you added a
                new path, you can specify templates in that directory by their 
                basename instead of having to specify the full path for the 
                template.

            </section>
            
            <section name="ch05_04" label="Standard template variables">

                <br/>

                For each template, there are a number of standard variables 
                available which you can always reference. These variables all 
                start with "YD_" and are all uppercase. Here's the list of the 
                standard variables:

                <p><table width="100%" border="1" cellspacing="0" cellpadding="2">
                    <tr>
                        <td width="30%"><b>Variable</b></td>
                        <td width="70%"><b>Explanantion</b></td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_NAME</td>
                        <td>name of the framework</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_VERSION</td>
                        <td>version of the framework</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_NAMEVERS</td>
                        <td>the combination of the two items above</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FW_HOMEPAGE</td>
                        <td>the homepage of the Yellow Duck Framework</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_SELF_SCRIPT</td>
                        <td>the current script's path, e.g. "/myapp/index.php"</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_SELF_URI</td>
                        <td>the URI which was given in order to access this page, e.g. 
                        "/myapp/index.php?do=edit"</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_ACTION_PARAM</td>
                        <td>the name of the $_GET parameter that specifies which action needs to 
                        be executed. This is "do" by convention.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_ENV</td>
                        <td>These variables are imported into PHP's global namespace from the 
                        environment under which the PHP parser is running.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_COOKIE</td>
                        <td>An associative array of variables passed to the current script via 
                        HTTP cookies.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_GET</td>
                        <td>An associative array of variables passed to the current script via 
                        the HTTP GET method.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_POST</td>
                        <td>An associative array of variables passed to the current script via 
                        the HTTP POST method.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_FILES</td>
                        <td>An associative array of items uploaded to the current script via the
                        HTTP POST method.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_REQUEST</td>
                        <td>An associative array consisting of the contents of YD_GET, YD_POST 
                        and YD_COOKIE.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_SESSION</td>
                        <td>An associative array containing session variables available to the 
                        current script.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_GLOBALS</td>
                        <td>An associative array containing references to all variables which 
                        are currently defined in the global scope of the script.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_DB_CONN_CNT</td>
                        <td>Number of database connections that were made.</td>
                    </tr>
                    <tr>
                        <td valign="top">YD_DB_SQLQ_CNT</td>
                        <td>Number of database queries that were performed.</td>
                    </tr>
                </table></p>
    
                Please do not use the "YD_" prefix for your own variables.
                This prefix is uniquely reserverd for the variables 
                automatically assigned by the Yellow Duck Framework.

            </section>

            <section name="ch05_05" label="PHP configuration for short open tags">

                <br/>

                Depending on how you want to write the PHP constructs, you might 
                need to enable the short open tags function in PHP. This is done
                by changing the PHP configuration in php.ini or using a
                .htaccess file. You will need to add the following line to 
                enable short open tags:

                <br/><br/>

                Using a .htaccess file
                <br/>
                <pre>php_flag short_open_tag On</pre>

                Using the php.ini file
                <br/>
                <pre>short_open_tag = On</pre>

                If you enable the short open tags, you will be able to shorten
                the following constructs in the templates:

                <pre><font color="#000000">Using the long notation:</font>
<font color="#0000FF">&lt;?php</font><font color="#000033"> </font><font color="#7F007F">echo</font><font color="#000000">(</font><font color="#000033"> </font><font color="#00007F">$myVar</font><font color="#000033"> </font><font color="#000000">)</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font>

<font color="#000000">Using short open tags</font>
<font color="#0000FF">&lt;?</font><font color="#000000">=</font><font color="#000033"> </font><font color="#00007F">$myVar</font><font color="#000033"> </font><font color="#0000FF">?&gt;</font></pre>

                All the examples for the Yellow Duck Framework have been written 
                using short open tags. Make sure you have them enabled before 
                running the examples.

                <page-break />

            </section>

        <section name="ch06" label="Using and validating forms" />

            <section name="ch06_01" label="Background information">

                <br/>

                Processing and validating forms is probably one of the most
                time-consuming and most difficult things to handle in a web
                application. Forms can vary from very simple forms to really
                difficult forms, which makes having a unified system to handle
                all these forms a real time-saver.

                <br/><br/>

                By applying an object oriented approach to forms, and by
                providing different methods and objects to handle forms with
                ease, processing forms has become really easy and fast.

                <br/><br/>

                The form module in the Yellow Duck Framework is based on a 
                package from the <a target="_blank" href="http://pear.php.net/">PEAR</a>
                (PHP Extension and Application Repository) libraries. The
                package we used is called <a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.php">HTML_QuickForm</a>
                and provides most of the functionality. A number of additions
                were made to this package to make it more straightforward for
                using this in the Yellow Duck Framework.

            </section>

            <section name="ch06_02" label="The YDForm class">

                <br/>

                All te functionality for form handling in the Yellow Duck
                Framework is handled by a class called "YDForm". The YDForm
                class extends the HTML_QuickForm class to provide some 
                additional features only found in the Yellow Duck Framework.

                <br/><br/>

                In addition to the standard functions provided by the
                HTML_QuickForm class, the YDForm class provides one additional
                function, called "toArray", which converts the form object into
                an array suitable for using with the YDTemplate class.

                <br/><br/>

                For an overview of the standard functions for the HTML_QuickForm
                class, please have a look on the documentation page which you 
                can find on: <a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.php">http://pear.php.net/manual/en/package.html.html-quickform.php</a>.

            </section>

            <section name="ch06_03" label="Creating a new form">

                <br/>

                Creating a new form is done in two steps. First, you need to 
                include the class definition, and then you need to create an
                instance of the YDForm class. The following code sample will
                illustrate this:

                <pre><font color="#7F007F">require_once</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'YDForm.php'</font><font color="#000033"> </font><font color="#000000">);</font>
<font color="#00007F">$form</font><font color="#000033"> </font><font color="#000000">=</font><font color="#000033"> </font><font color="#7F007F">new</font><font color="#000033"> YDForm</font><font color="#000000">(</font><font color="#000033"> </font><font color="#009F00">'myForm'</font><font color="#000033"> </font><font color="#000000">);</font></pre>

                The first line will include the correct class definition, while
                the second one will create an instance of the form class. The 
                class constructor takes a number of arguments, but only one is
                required, the rest is optional. Here's the list of parameters
                that you can pass when instantiating the form object.

                <div><ul>
                    <li><b>$name</b>: the name of the form.</li>
                    <li><b>$method (optional)</b>:  Method used for submitting the form. 
                    Most of the times, this is either POST or GET.</li>
                    <li><b>$action (optional)</b>: Action used for submitting the form. 
                    If not specified, it will default to the current URI.</li> 
                    <li><b>$target (optional)</b>: HTML target for the form.</li>
                    <li><b>$attributes (optional)</b>: Attributes for the form.</li>
                </ul></div>

                Make sure that all the different form instances you want to use
                all have separate names. If not, the results might not be as you
                expected.

                <br/><br/>

                By default, the form's action - the URI that will be called when 
                the form is submitted - is the same URI that displayed the form 
                in the first place. This may seem strange at first, but it is 
                actually very useful, as we shall see.

            </section>

            <section name="ch06_04" label="Adding form elements">

                <br/>

            </section>

            <section name="ch06_05" label="The different form elements">

                <br/>

            </section>

            <section name="ch06_06" label="Displaying the form">

                <br/>

            </section>

            <section name="ch06_07" label="Validating forms">

                <br/>

            </section>

            <section name="ch06_08" label="Processing forms">

                <br/>

            </section>

            <section name="ch06_09" label="Tips and tricks">

                <br/>

            </section>

            <section name="ch06_10" label="More information">

                <br/>

                For more information about using the HTML_QuickForm package from
                the PEAR project, you can visit the following websites:

                <div><ul>
                    <li><a target="_blank" href="http://www.thelinuxconsultancy.co.uk/quickform.html">http://www.thelinuxconsultancy.co.uk/quickform.html</a></li>
                    <li><a target="_blank" href="http://pear.php.net/manual/en/package.html.html-quickform.php">http://pear.php.net/manual/en/package.html.html-quickform.php</a></li>
                </ul></div>

                The YDForm class is an extension of the HTML_QuickForm package
                and provides all the functionality and more.

                <page-break />

            </section>

        <section name="ch07" label="Accessing database contents">
            <br/>
            Not written yet
                <page-break />
        </section>

        <section name="ch08" label="How to handle authentication">
            <br/>
            Not written yet
                <page-break />
        </section>

        <section name="ch09" label="Using files, directories and images">
            <br/>
            Not written yet
                <page-break />
        </section>

        <section name="ch10" label="Using URLs and downloading data">
            <br/>
            Not written yet
                <page-break />
        </section>

        <section name="ch11" label="Using XML/RPC clients and servers">
            <br/>
            Not written yet
                <page-break />
        </section>

        <section name="ch12" label="Sending emails">
            <br/>
            Not written yet
                <page-break />
        </section>

        <section name="ch13" label="Other classes and modules">
            <br/>
            Not written yet
                <page-break />
        </section>

    </document-body>

    <document-footer>
        <table width="100%">
            <tr>
                <td align="left"></td>
                <td align="right"><page-number /></td>
            </tr>
        </table>
    </document-footer>

</document>
